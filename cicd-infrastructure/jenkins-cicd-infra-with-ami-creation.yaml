AWSTemplateFormatVersion: 2010-09-09	
Description: CICD Infrastructure Setup Template	
Parameters:	
  EnvironmentPrefix:	
    Type: String	
    Default: CICD	
    Description: Prefix for Env Name	
  VpcBlock:	
    Type: String	
    Default: 192.168.0.0/16	
    Description: >-	
      The CIDR range for the VPC. This should be a valid private (RFC 1918) CIDR	
      range.	
  SourceImageIDSSMParam:	
    Type: String	
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-ebs	
    Description: Source Image ID / AMI ID	
  DomainName:	
    Type: String	
    Description: 'Hosted Zone Domain Name.'	
  HostedZoneId:	
    Type: String	
    Description: 'ID of the route53 hosted zone'	
  Subnet01Block:	
    Type: String	
    Default: 192.168.1.0/24	
    Description: CidrBlock for subnet 01 within the VPC	
  Subnet02Block:	
    Type: String	
    Default: 192.168.2.0/24	
    Description: CidrBlock for subnet 02 within the VPC	
  Subnet03Block:	
    Type: String	
    Default: 192.168.3.0/24	
    Description: CidrBlock for subnet 03 within the VPC	
  Subnet04Block:	
    Type: String	
    Default: 192.168.4.0/24	
    Description: CidrBlock for subnet 04 within the VPC	
  Subnet05Block:	
    Type: String	
    Default: 192.168.5.0/24	
    Description: CidrBlock for subnet 05 within the VPC	
  Subnet06Block:	
    Type: String	
    Default: 192.168.6.0/24	
    Description: CidrBlock for subnet 06 within the VPC	
  KeyName:	
    Type: "AWS::EC2::KeyPair::KeyName"	
    Description: The EC2 Key Pair to allow SSH access to the instances	
  BastionNodeAutoScalingGroupDesiredCapacity:	
    Type: Number	
    Default: 1	
    Description: Desired capacity of Bastion Node Group ASG.	
  BastionNodeAutoScalingGroupMaxSize:	
    Type: Number	
    Default: 1	
    Description: Maximum size of Bastion Node Group ASG. Set to at least 1 greater than NodeAutoScalingGroupDesiredCapacity.	
  BastionNodeAutoScalingGroupMinSize:	
    Type: Number	
    Default: 1	
    Description: Minimum size of Bastion Node Group ASG.	
  NodeAutoScalingGroupDesiredCapacity:	
    Type: Number	
    Default: 1	
    Description: Desired capacity of Node Group ASG.	
  NodeAutoScalingGroupMaxSize:	
    Type: Number	
    Default: 1	
    Description: Maximum size of Node Group ASG. Set to at least 1 greater than NodeAutoScalingGroupDesiredCapacity.	
  NodeAutoScalingGroupMinSize:	
    Type: Number	
    Default: 1	
    Description: Minimum size of Node Group ASG.	
  SonarNodeAutoScalingGroupDesiredCapacity:	
    Type: Number	
    Default: 1	
    Description: Desired capacity of Sonar Node Group ASG.	
  SonarNodeAutoScalingGroupMaxSize:	
    Type: Number	
    Default: 1	
    Description: Maximum size of Sonar Node Group ASG. Set to at least 1 greater than NodeAutoScalingGroupDesiredCapacity.	
  SonarNodeAutoScalingGroupMinSize:	
    Type: Number	
    Default: 1	
    Description: Minimum size of Sonar Node Group ASG.	
  PolicyTargetValue:	
    Type: String	
    Default: 40	
  NodeGroupName:	
    Type: String	
    Default: cicd	
    Description: Unique identifier for the Node Group.	
  NodeInstanceType:	
    Type: String	
    Default: t3.large	
    AllowedValues:	
      - a1.medium	
      - a1.large	
      - a1.xlarge	
      - a1.2xlarge	
      - a1.4xlarge	
      - c1.medium	
      - c1.xlarge	
      - c3.large	
      - c3.xlarge	
      - c3.2xlarge	
      - c3.4xlarge	
      - c3.8xlarge	
      - c4.large	
      - c4.xlarge	
      - c4.2xlarge	
      - c4.4xlarge	
      - c4.8xlarge	
      - c5.large	
      - c5.xlarge	
      - c5.2xlarge	
      - c5.4xlarge	
      - c5.9xlarge	
      - c5.12xlarge	
      - c5.18xlarge	
      - c5.24xlarge	
      - c5.metal	
      - c5d.large	
      - c5d.xlarge	
      - c5d.2xlarge	
      - c5d.4xlarge	
      - c5d.9xlarge	
      - c5d.18xlarge	
      - c5n.large	
      - c5n.xlarge	
      - c5n.2xlarge	
      - c5n.4xlarge	
      - c5n.9xlarge	
      - c5n.18xlarge	
      - cc2.8xlarge	
      - cr1.8xlarge	
      - d2.xlarge	
      - d2.2xlarge	
      - d2.4xlarge	
      - d2.8xlarge	
      - f1.2xlarge	
      - f1.4xlarge	
      - f1.16xlarge	
      - g2.2xlarge	
      - g2.8xlarge	
      - g3s.xlarge	
      - g3.4xlarge	
      - g3.8xlarge	
      - g3.16xlarge	
      - h1.2xlarge	
      - h1.4xlarge	
      - h1.8xlarge	
      - h1.16xlarge	
      - hs1.8xlarge	
      - i2.xlarge	
      - i2.2xlarge	
      - i2.4xlarge	
      - i2.8xlarge	
      - i3.large	
      - i3.xlarge	
      - i3.2xlarge	
      - i3.4xlarge	
      - i3.8xlarge	
      - i3.16xlarge	
      - i3.metal	
      - i3en.large	
      - i3en.xlarge	
      - i3en.2xlarge	
      - i3en.3xlarge	
      - i3en.6xlarge	
      - i3en.12xlarge	
      - i3en.24xlarge	
      - m1.small	
      - m1.medium	
      - m1.large	
      - m1.xlarge	
      - m2.xlarge	
      - m2.2xlarge	
      - m2.4xlarge	
      - m3.medium	
      - m3.large	
      - m3.xlarge	
      - m3.2xlarge	
      - m4.large	
      - m4.xlarge	
      - m4.2xlarge	
      - m4.4xlarge	
      - m4.10xlarge	
      - m4.16xlarge	
      - m5.large	
      - m5.xlarge	
      - m5.2xlarge	
      - m5.4xlarge	
      - m5.8xlarge	
      - m5.12xlarge	
      - m5.16xlarge	
      - m5.24xlarge	
      - m5.metal	
      - m5a.large	
      - m5a.xlarge	
      - m5a.2xlarge	
      - m5a.4xlarge	
      - m5a.8xlarge	
      - m5a.12xlarge	
      - m5a.16xlarge	
      - m5a.24xlarge	
      - m5ad.large	
      - m5ad.xlarge	
      - m5ad.2xlarge	
      - m5ad.4xlarge	
      - m5ad.12xlarge	
      - m5ad.24xlarge	
      - m5d.large	
      - m5d.xlarge	
      - m5d.2xlarge	
      - m5d.4xlarge	
      - m5d.8xlarge	
      - m5d.12xlarge	
      - m5d.16xlarge	
      - m5d.24xlarge	
      - m5d.metal	
      - p2.xlarge	
      - p2.8xlarge	
      - p2.16xlarge	
      - p3.2xlarge	
      - p3.8xlarge	
      - p3.16xlarge	
      - p3dn.24xlarge	
      - r3.large	
      - r3.xlarge	
      - r3.2xlarge	
      - r3.4xlarge	
      - r3.8xlarge	
      - r4.large	
      - r4.xlarge	
      - r4.2xlarge	
      - r4.4xlarge	
      - r4.8xlarge	
      - r4.16xlarge	
      - r5.large	
      - r5.xlarge	
      - r5.2xlarge	
      - r5.4xlarge	
      - r5.8xlarge	
      - r5.12xlarge	
      - r5.16xlarge	
      - r5.24xlarge	
      - r5.metal	
      - r5a.large	
      - r5a.xlarge	
      - r5a.2xlarge	
      - r5a.4xlarge	
      - r5a.8xlarge	
      - r5a.12xlarge	
      - r5a.16xlarge	
      - r5a.24xlarge	
      - r5ad.large	
      - r5ad.xlarge	
      - r5ad.2xlarge	
      - r5ad.4xlarge	
      - r5ad.12xlarge	
      - r5ad.24xlarge	
      - r5d.large	
      - r5d.xlarge	
      - r5d.2xlarge	
      - r5d.4xlarge	
      - r5d.8xlarge	
      - r5d.12xlarge	
      - r5d.16xlarge	
      - r5d.24xlarge	
      - r5d.metal	
      - t1.micro	
      - t2.nano	
      - t2.micro	
      - t2.small	
      - t2.medium	
      - t2.large	
      - t2.xlarge	
      - t2.2xlarge	
      - t3.nano	
      - t3.micro	
      - t3.small	
      - t3.medium	
      - t3.large	
      - t3.xlarge	
      - t3.2xlarge	
      - t3a.nano	
      - t3a.micro	
      - t3a.small	
      - t3a.medium	
      - t3a.large	
      - t3a.xlarge	
      - t3a.2xlarge	
      - u-6tb1.metal	
      - u-9tb1.metal	
      - u-12tb1.metal	
      - x1.16xlarge	
      - x1.32xlarge	
      - x1e.xlarge	
      - x1e.2xlarge	
      - x1e.4xlarge	
      - x1e.8xlarge	
      - x1e.16xlarge	
      - x1e.32xlarge	
      - z1d.large	
      - z1d.xlarge	
      - z1d.2xlarge	
      - z1d.3xlarge	
      - z1d.6xlarge	
      - z1d.12xlarge	
      - z1d.metal	
    ConstraintDescription: Must be a valid EC2 instance type	
    Description: EC2 instance type for the node instances	
  SlaveInstanceType:	
    Type: String	
    Default: t3.medium	
    AllowedValues:	
      - a1.medium	
      - a1.large	
      - a1.xlarge	
      - a1.2xlarge	
      - a1.4xlarge	
      - c1.medium	
      - c1.xlarge	
      - c3.large	
      - c3.xlarge	
      - c3.2xlarge	
      - c3.4xlarge	
      - c3.8xlarge	
      - c4.large	
      - c4.xlarge	
      - c4.2xlarge	
      - c4.4xlarge	
      - c4.8xlarge	
      - c5.large	
      - c5.xlarge	
      - c5.2xlarge	
      - c5.4xlarge	
      - c5.9xlarge	
      - c5.12xlarge	
      - c5.18xlarge	
      - c5.24xlarge	
      - c5.metal	
      - c5d.large	
      - c5d.xlarge	
      - c5d.2xlarge	
      - c5d.4xlarge	
      - c5d.9xlarge	
      - c5d.18xlarge	
      - c5n.large	
      - c5n.xlarge	
      - c5n.2xlarge	
      - c5n.4xlarge	
      - c5n.9xlarge	
      - c5n.18xlarge	
      - cc2.8xlarge	
      - cr1.8xlarge	
      - d2.xlarge	
      - d2.2xlarge	
      - d2.4xlarge	
      - d2.8xlarge	
      - f1.2xlarge	
      - f1.4xlarge	
      - f1.16xlarge	
      - g2.2xlarge	
      - g2.8xlarge	
      - g3s.xlarge	
      - g3.4xlarge	
      - g3.8xlarge	
      - g3.16xlarge	
      - h1.2xlarge	
      - h1.4xlarge	
      - h1.8xlarge	
      - h1.16xlarge	
      - hs1.8xlarge	
      - i2.xlarge	
      - i2.2xlarge	
      - i2.4xlarge	
      - i2.8xlarge	
      - i3.large	
      - i3.xlarge	
      - i3.2xlarge	
      - i3.4xlarge	
      - i3.8xlarge	
      - i3.16xlarge	
      - i3.metal	
      - i3en.large	
      - i3en.xlarge	
      - i3en.2xlarge	
      - i3en.3xlarge	
      - i3en.6xlarge	
      - i3en.12xlarge	
      - i3en.24xlarge	
      - m1.small	
      - m1.medium	
      - m1.large	
      - m1.xlarge	
      - m2.xlarge	
      - m2.2xlarge	
      - m2.4xlarge	
      - m3.medium	
      - m3.large	
      - m3.xlarge	
      - m3.2xlarge	
      - m4.large	
      - m4.xlarge	
      - m4.2xlarge	
      - m4.4xlarge	
      - m4.10xlarge	
      - m4.16xlarge	
      - m5.large	
      - m5.xlarge	
      - m5.2xlarge	
      - m5.4xlarge	
      - m5.8xlarge	
      - m5.12xlarge	
      - m5.16xlarge	
      - m5.24xlarge	
      - m5.metal	
      - m5a.large	
      - m5a.xlarge	
      - m5a.2xlarge	
      - m5a.4xlarge	
      - m5a.8xlarge	
      - m5a.12xlarge	
      - m5a.16xlarge	
      - m5a.24xlarge	
      - m5ad.large	
      - m5ad.xlarge	
      - m5ad.2xlarge	
      - m5ad.4xlarge	
      - m5ad.12xlarge	
      - m5ad.24xlarge	
      - m5d.large	
      - m5d.xlarge	
      - m5d.2xlarge	
      - m5d.4xlarge	
      - m5d.8xlarge	
      - m5d.12xlarge	
      - m5d.16xlarge	
      - m5d.24xlarge	
      - m5d.metal	
      - p2.xlarge	
      - p2.8xlarge	
      - p2.16xlarge	
      - p3.2xlarge	
      - p3.8xlarge	
      - p3.16xlarge	
      - p3dn.24xlarge	
      - r3.large	
      - r3.xlarge	
      - r3.2xlarge	
      - r3.4xlarge	
      - r3.8xlarge	
      - r4.large	
      - r4.xlarge	
      - r4.2xlarge	
      - r4.4xlarge	
      - r4.8xlarge	
      - r4.16xlarge	
      - r5.large	
      - r5.xlarge	
      - r5.2xlarge	
      - r5.4xlarge	
      - r5.8xlarge	
      - r5.12xlarge	
      - r5.16xlarge	
      - r5.24xlarge	
      - r5.metal	
      - r5a.large	
      - r5a.xlarge	
      - r5a.2xlarge	
      - r5a.4xlarge	
      - r5a.8xlarge	
      - r5a.12xlarge	
      - r5a.16xlarge	
      - r5a.24xlarge	
      - r5ad.large	
      - r5ad.xlarge	
      - r5ad.2xlarge	
      - r5ad.4xlarge	
      - r5ad.12xlarge	
      - r5ad.24xlarge	
      - r5d.large	
      - r5d.xlarge	
      - r5d.2xlarge	
      - r5d.4xlarge	
      - r5d.8xlarge	
      - r5d.12xlarge	
      - r5d.16xlarge	
      - r5d.24xlarge	
      - r5d.metal	
      - t1.micro	
      - t2.nano	
      - t2.micro	
      - t2.small	
      - t2.medium	
      - t2.large	
      - t2.xlarge	
      - t2.2xlarge	
      - t3.nano	
      - t3.micro	
      - t3.small	
      - t3.medium	
      - t3.large	
      - t3.xlarge	
      - t3.2xlarge	
      - t3a.nano	
      - t3a.micro	
      - t3a.small	
      - t3a.medium	
      - t3a.large	
      - t3a.xlarge	
      - t3a.2xlarge	
      - u-6tb1.metal	
      - u-9tb1.metal	
      - u-12tb1.metal	
      - x1.16xlarge	
      - x1.32xlarge	
      - x1e.xlarge	
      - x1e.2xlarge	
      - x1e.4xlarge	
      - x1e.8xlarge	
      - x1e.16xlarge	
      - x1e.32xlarge	
      - z1d.large	
      - z1d.xlarge	
      - z1d.2xlarge	
      - z1d.3xlarge	
      - z1d.6xlarge	
      - z1d.12xlarge	
      - z1d.metal	
    ConstraintDescription: Must be a valid EC2 instance type	
    Description: EC2 instance type for the node instances	
  BastionInstanceType:	
    Type: String	
    Default: t2.micro	
    AllowedValues:	
      - a1.medium	
      - a1.large	
      - a1.xlarge	
      - a1.2xlarge	
      - a1.4xlarge	
      - c1.medium	
      - c1.xlarge	
      - c3.large	
      - c3.xlarge	
      - c3.2xlarge	
      - c3.4xlarge	
      - c3.8xlarge	
      - c4.large	
      - c4.xlarge	
      - c4.2xlarge	
      - c4.4xlarge	
      - c4.8xlarge	
      - c5.large	
      - c5.xlarge	
      - c5.2xlarge	
      - c5.4xlarge	
      - c5.9xlarge	
      - c5.12xlarge	
      - c5.18xlarge	
      - c5.24xlarge	
      - c5.metal	
      - c5d.large	
      - c5d.xlarge	
      - c5d.2xlarge	
      - c5d.4xlarge	
      - c5d.9xlarge	
      - c5d.18xlarge	
      - c5n.large	
      - c5n.xlarge	
      - c5n.2xlarge	
      - c5n.4xlarge	
      - c5n.9xlarge	
      - c5n.18xlarge	
      - cc2.8xlarge	
      - cr1.8xlarge	
      - d2.xlarge	
      - d2.2xlarge	
      - d2.4xlarge	
      - d2.8xlarge	
      - f1.2xlarge	
      - f1.4xlarge	
      - f1.16xlarge	
      - g2.2xlarge	
      - g2.8xlarge	
      - g3s.xlarge	
      - g3.4xlarge	
      - g3.8xlarge	
      - g3.16xlarge	
      - h1.2xlarge	
      - h1.4xlarge	
      - h1.8xlarge	
      - h1.16xlarge	
      - hs1.8xlarge	
      - i2.xlarge	
      - i2.2xlarge	
      - i2.4xlarge	
      - i2.8xlarge	
      - i3.large	
      - i3.xlarge	
      - i3.2xlarge	
      - i3.4xlarge	
      - i3.8xlarge	
      - i3.16xlarge	
      - i3.metal	
      - i3en.large	
      - i3en.xlarge	
      - i3en.2xlarge	
      - i3en.3xlarge	
      - i3en.6xlarge	
      - i3en.12xlarge	
      - i3en.24xlarge	
      - m1.small	
      - m1.medium	
      - m1.large	
      - m1.xlarge	
      - m2.xlarge	
      - m2.2xlarge	
      - m2.4xlarge	
      - m3.medium	
      - m3.large	
      - m3.xlarge	
      - m3.2xlarge	
      - m4.large	
      - m4.xlarge	
      - m4.2xlarge	
      - m4.4xlarge	
      - m4.10xlarge	
      - m4.16xlarge	
      - m5.large	
      - m5.xlarge	
      - m5.2xlarge	
      - m5.4xlarge	
      - m5.8xlarge	
      - m5.12xlarge	
      - m5.16xlarge	
      - m5.24xlarge	
      - m5.metal	
      - m5a.large	
      - m5a.xlarge	
      - m5a.2xlarge	
      - m5a.4xlarge	
      - m5a.8xlarge	
      - m5a.12xlarge	
      - m5a.16xlarge	
      - m5a.24xlarge	
      - m5ad.large	
      - m5ad.xlarge	
      - m5ad.2xlarge	
      - m5ad.4xlarge	
      - m5ad.12xlarge	
      - m5ad.24xlarge	
      - m5d.large	
      - m5d.xlarge	
      - m5d.2xlarge	
      - m5d.4xlarge	
      - m5d.8xlarge	
      - m5d.12xlarge	
      - m5d.16xlarge	
      - m5d.24xlarge	
      - m5d.metal	
      - p2.xlarge	
      - p2.8xlarge	
      - p2.16xlarge	
      - p3.2xlarge	
      - p3.8xlarge	
      - p3.16xlarge	
      - p3dn.24xlarge	
      - r3.large	
      - r3.xlarge	
      - r3.2xlarge	
      - r3.4xlarge	
      - r3.8xlarge	
      - r4.large	
      - r4.xlarge	
      - r4.2xlarge	
      - r4.4xlarge	
      - r4.8xlarge	
      - r4.16xlarge	
      - r5.large	
      - r5.xlarge	
      - r5.2xlarge	
      - r5.4xlarge	
      - r5.8xlarge	
      - r5.12xlarge	
      - r5.16xlarge	
      - r5.24xlarge	
      - r5.metal	
      - r5a.large	
      - r5a.xlarge	
      - r5a.2xlarge	
      - r5a.4xlarge	
      - r5a.8xlarge	
      - r5a.12xlarge	
      - r5a.16xlarge	
      - r5a.24xlarge	
      - r5ad.large	
      - r5ad.xlarge	
      - r5ad.2xlarge	
      - r5ad.4xlarge	
      - r5ad.12xlarge	
      - r5ad.24xlarge	
      - r5d.large	
      - r5d.xlarge	
      - r5d.2xlarge	
      - r5d.4xlarge	
      - r5d.8xlarge	
      - r5d.12xlarge	
      - r5d.16xlarge	
      - r5d.24xlarge	
      - r5d.metal	
      - t1.micro	
      - t2.nano	
      - t2.micro	
      - t2.small	
      - t2.medium	
      - t2.large	
      - t2.xlarge	
      - t2.2xlarge	
      - t3.nano	
      - t3.micro	
      - t3.small	
      - t3.medium	
      - t3.large	
      - t3.xlarge	
      - t3.2xlarge	
      - t3a.nano	
      - t3a.micro	
      - t3a.small	
      - t3a.medium	
      - t3a.large	
      - t3a.xlarge	
      - t3a.2xlarge	
      - u-6tb1.metal	
      - u-9tb1.metal	
      - u-12tb1.metal	
      - x1.16xlarge	
      - x1.32xlarge	
      - x1e.xlarge	
      - x1e.2xlarge	
      - x1e.4xlarge	
      - x1e.8xlarge	
      - x1e.16xlarge	
      - x1e.32xlarge	
      - z1d.large	
      - z1d.xlarge	
      - z1d.2xlarge	
      - z1d.3xlarge	
      - z1d.6xlarge	
      - z1d.12xlarge	
      - z1d.metal	
    ConstraintDescription: Must be a valid EC2 instance type	
    Description: EC2 instance type for the node instances	
  NodeVolumeSize:	
    Type: Number	
    Default: 20	
    Description: Node volume size	
  JenkinsNoOfExecuters:	
    Type: Number	
    Default: 1	
    Description: Jenkins Master no of executors	
  SlaveNoOfExecuters:	
    Type: Number	
    Default: 1	
    Description: Slave no of executors	
  SlaveMinInstances:	
    Type: Number	
    Default: 0	
    Description: EC2 Plugin slave min instances value	
  SlaveMaxInstances:	
    Type: Number	
    Default: 4	
    Description: EC2 Plugin slave mx instances value	
  SlaveSpareInstances:	
    Type: Number	
    Default: 0	
    Description: EC2 Plugin slave spare instances value	
  SlaveIdleTimeOut:	
    Type: Number	
    Default: -5	
    Description: EC2 Plugin slave idle timeout value	
  SonarInstanceType:	
    Type: String	
    Default: t3.medium	
    AllowedValues:	
      - a1.medium	
      - a1.large	
      - a1.xlarge	
      - a1.2xlarge	
      - a1.4xlarge	
      - c1.medium	
      - c1.xlarge	
      - c3.large	
      - c3.xlarge	
      - c3.2xlarge	
      - c3.4xlarge	
      - c3.8xlarge	
      - c4.large	
      - c4.xlarge	
      - c4.2xlarge	
      - c4.4xlarge	
      - c4.8xlarge	
      - c5.large	
      - c5.xlarge	
      - c5.2xlarge	
      - c5.4xlarge	
      - c5.9xlarge	
      - c5.12xlarge	
      - c5.18xlarge	
      - c5.24xlarge	
      - c5.metal	
      - c5d.large	
      - c5d.xlarge	
      - c5d.2xlarge	
      - c5d.4xlarge	
      - c5d.9xlarge	
      - c5d.18xlarge	
      - c5n.large	
      - c5n.xlarge	
      - c5n.2xlarge	
      - c5n.4xlarge	
      - c5n.9xlarge	
      - c5n.18xlarge	
      - cc2.8xlarge	
      - cr1.8xlarge	
      - d2.xlarge	
      - d2.2xlarge	
      - d2.4xlarge	
      - d2.8xlarge	
      - f1.2xlarge	
      - f1.4xlarge	
      - f1.16xlarge	
      - g2.2xlarge	
      - g2.8xlarge	
      - g3s.xlarge	
      - g3.4xlarge	
      - g3.8xlarge	
      - g3.16xlarge	
      - h1.2xlarge	
      - h1.4xlarge	
      - h1.8xlarge	
      - h1.16xlarge	
      - hs1.8xlarge	
      - i2.xlarge	
      - i2.2xlarge	
      - i2.4xlarge	
      - i2.8xlarge	
      - i3.large	
      - i3.xlarge	
      - i3.2xlarge	
      - i3.4xlarge	
      - i3.8xlarge	
      - i3.16xlarge	
      - i3.metal	
      - i3en.large	
      - i3en.xlarge	
      - i3en.2xlarge	
      - i3en.3xlarge	
      - i3en.6xlarge	
      - i3en.12xlarge	
      - i3en.24xlarge	
      - m1.small	
      - m1.medium	
      - m1.large	
      - m1.xlarge	
      - m2.xlarge	
      - m2.2xlarge	
      - m2.4xlarge	
      - m3.medium	
      - m3.large	
      - m3.xlarge	
      - m3.2xlarge	
      - m4.large	
      - m4.xlarge	
      - m4.2xlarge	
      - m4.4xlarge	
      - m4.10xlarge	
      - m4.16xlarge	
      - m5.large	
      - m5.xlarge	
      - m5.2xlarge	
      - m5.4xlarge	
      - m5.8xlarge	
      - m5.12xlarge	
      - m5.16xlarge	
      - m5.24xlarge	
      - m5.metal	
      - m5a.large	
      - m5a.xlarge	
      - m5a.2xlarge	
      - m5a.4xlarge	
      - m5a.8xlarge	
      - m5a.12xlarge	
      - m5a.16xlarge	
      - m5a.24xlarge	
      - m5ad.large	
      - m5ad.xlarge	
      - m5ad.2xlarge	
      - m5ad.4xlarge	
      - m5ad.12xlarge	
      - m5ad.24xlarge	
      - m5d.large	
      - m5d.xlarge	
      - m5d.2xlarge	
      - m5d.4xlarge	
      - m5d.8xlarge	
      - m5d.12xlarge	
      - m5d.16xlarge	
      - m5d.24xlarge	
      - m5d.metal	
      - p2.xlarge	
      - p2.8xlarge	
      - p2.16xlarge	
      - p3.2xlarge	
      - p3.8xlarge	
      - p3.16xlarge	
      - p3dn.24xlarge	
      - r3.large	
      - r3.xlarge	
      - r3.2xlarge	
      - r3.4xlarge	
      - r3.8xlarge	
      - r4.large	
      - r4.xlarge	
      - r4.2xlarge	
      - r4.4xlarge	
      - r4.8xlarge	
      - r4.16xlarge	
      - r5.large	
      - r5.xlarge	
      - r5.2xlarge	
      - r5.4xlarge	
      - r5.8xlarge	
      - r5.12xlarge	
      - r5.16xlarge	
      - r5.24xlarge	
      - r5.metal	
      - r5a.large	
      - r5a.xlarge	
      - r5a.2xlarge	
      - r5a.4xlarge	
      - r5a.8xlarge	
      - r5a.12xlarge	
      - r5a.16xlarge	
      - r5a.24xlarge	
      - r5ad.large	
      - r5ad.xlarge	
      - r5ad.2xlarge	
      - r5ad.4xlarge	
      - r5ad.12xlarge	
      - r5ad.24xlarge	
      - r5d.large	
      - r5d.xlarge	
      - r5d.2xlarge	
      - r5d.4xlarge	
      - r5d.8xlarge	
      - r5d.12xlarge	
      - r5d.16xlarge	
      - r5d.24xlarge	
      - r5d.metal	
      - t1.micro	
      - t2.nano	
      - t2.micro	
      - t2.small	
      - t2.medium	
      - t2.large	
      - t2.xlarge	
      - t2.2xlarge	
      - t3.nano	
      - t3.micro	
      - t3.small	
      - t3.medium	
      - t3.large	
      - t3.xlarge	
      - t3.2xlarge	
      - t3a.nano	
      - t3a.micro	
      - t3a.small	
      - t3a.medium	
      - t3a.large	
      - t3a.xlarge	
      - t3a.2xlarge	
      - u-6tb1.metal	
      - u-9tb1.metal	
      - u-12tb1.metal	
      - x1.16xlarge	
      - x1.32xlarge	
      - x1e.xlarge	
      - x1e.2xlarge	
      - x1e.4xlarge	
      - x1e.8xlarge	
      - x1e.16xlarge	
      - x1e.32xlarge	
      - z1d.large	
      - z1d.xlarge	
      - z1d.2xlarge	
      - z1d.3xlarge	
      - z1d.6xlarge	
      - z1d.12xlarge	
      - z1d.metal	
    ConstraintDescription: Must be a valid EC2 instance type	
    Description: EC2 instance type for the node instances	
  SonarNodeVolumeSize:	
    Type: Number	
    Default: 20	
    Description: Node volume size	
  MountPoint:	
    Description: The Linux mount point for the EFS volume	
    Type: String	
    MinLength: '1'	
    Default: var/lib/jenkins	
  DatabaseUsername:	
    AllowedPattern: "[a-zA-Z0-9]+"	
    ConstraintDescription: must be between 1 to 16 alphanumeric characters.	
    Description: The database admin account user name, between 1 to 16 alphanumeric characters.	
    MaxLength: '16'	
    MinLength: '1'	
    Type: String	
    Default: sonarqube	
  DatabasePassword:	
    AllowedPattern: "[a-zA-Z0-9]+"	
    ConstraintDescription: must be between 8 to 41 alphanumeric characters.	
    Description: The database admin account password, between 8 to 41 alphanumeric characters.	
    MaxLength: '41'	
    MinLength: '8'	
    NoEcho: 'true'	
    Type: String	
  DatabaseName:	
    AllowedPattern: "[a-zA-Z0-9-_]+"	
    ConstraintDescription: must be between 4 to 30 alphanumeric characters.	
    Description: The database admin account user name, between 4 to 30 alphanumeric characters.	
    MaxLength: '30'	
    MinLength: '4'	
    Type: String	
    Default: sonarqube	
  InstanceType:	
    Type: String	
    Default: db.r5.large	
    Description: Enter db Instance types.	
  DBClusterIdentifier:	
    Type: String	
    Description: Database Cluster Name	
    Default: sonarqube	
  DatabaseReplication:	
    Type: String	
    AllowedValues:	
      - 'Required'	
      - 'Not Required'	
    Default: Not Required	
    Description: Do this deployment need Database Replication or Not	
  RDSBackupRetentionPeriod:	
    Type: Number	
    Default: 7	
    Description: Database backup retention period in days.	
  CodeArtifactDomain:	
    Description: CodeArtifact Domain Name	
    Type: String	
  CodeArtifactRepoName:	
    Description: CodeArtifact Repository Name	
    Type: String	
  DevopsRepoGitUrl:	
    Description: Devops Git repository url	
    Type: String	
  GitUsername:	
    Description: Username for the Git repos.	
    Type: String	
  GitPassword:	
    Description: Password for the Git user.	
    Type: String	
    NoEcho: 'true'	
  EC2SlaveKey:	
    Description: Key for ec2 slaves.	
    Type: String	
    NoEcho: 'true'	
  JenkinsAMIPath:	
    Description: Jenkins AMI Parameter Path	
    Type: String	
    Default: /GoldenAMI/cicd/jenkins/latest	
  SonarAMIPath:	
    Description: Sonar AMI Parameter Path	
    Type: String	
    Default: /GoldenAMI/cicd/sonar/latest	
  BastionAMIPath:	
    Description: Bastion AMI Parameter Path	
    Type: String	
    Default: /GoldenAMI/cicd/bastion/latest	
  SlaveAMIPath:	
    Description: Slave AMI Parameter Path	
    Type: String	
    Default: /GoldenAMI/cicd/slave/latest	
Metadata:	
  'AWS::CloudFormation::Interface':	
    ParameterGroups:	
      - Label:	
          default: Network and Main Configs	
        Parameters:	
          - EnvironmentPrefix	
          - VpcBlock	
          - SourceImageIDSSMParam	
          - DomainName	
          - HostedZoneId	
          - Subnet01Block	
          - Subnet02Block	
          - Subnet03Block	
          - Subnet04Block	
          - Subnet05Block	
          - Subnet06Block	
          - KeyName	
          - PolicyTargetValue	
      - Label:	
          default: Bastion Configuration	
        Parameters:	
          - BastionNodeAutoScalingGroupMinSize	
          - BastionNodeAutoScalingGroupDesiredCapacity	
          - BastionNodeAutoScalingGroupMaxSize	
          - BastionInstanceType	
          - BastionAMIPath	
      - Label:	
          default: Jenkins Configuration	
        Parameters:	
          - NodeGroupName	
          - NodeAutoScalingGroupMinSize	
          - NodeAutoScalingGroupDesiredCapacity	
          - NodeAutoScalingGroupMaxSize	
          - NodeInstanceType	
          - NodeVolumeSize	
          - MountPoint	
          - JenkinsNoOfExecuters	
          - DevopsRepoGitUrl	
          - GitUsername	
          - GitPassword	
          - JenkinsAMIPath	
      - Label:	
          default: Jenkins Slave Configuration	
        Parameters:	
          - SlaveInstanceType	
          - EC2SlaveKey	
          - SlaveAMIPath	
          - SlaveNoOfExecuters	
          - SlaveMinInstances	
          - SlaveMaxInstances	
          - SlaveSpareInstances	
          - SlaveIdleTimeOut	
      - Label:	
          default: Sonar Configuration	
        Parameters:	
          - SonarNodeAutoScalingGroupMinSize	
          - SonarNodeAutoScalingGroupDesiredCapacity	
          - SonarNodeAutoScalingGroupMaxSize	
          - SonarInstanceType	
          - SonarNodeVolumeSize	
          - DatabaseUsername	
          - DatabasePassword	
          - DatabaseName	
          - InstanceType	
          - DBClusterIdentifier	
          - DatabaseReplication	
          - RDSBackupRetentionPeriod	
          - SonarAMIPath	
      - Label:	
          default: Other CICD Configuration	
        Parameters:	
          - CodeArtifactDomain	
          - CodeArtifactRepoName	
Conditions:	
  HasDomainName: !Not [!Equals [!Ref DomainName, '']]	
  DBReplicationRequired: !Equals	
    - !Ref DatabaseReplication	
    - 'Required'	
Resources:	
  JenkinsAMIIDParameter:	
    Type: AWS::SSM::Parameter	
    Properties:	
      Name: !Ref JenkinsAMIPath	
      Type: String	
      Value: nil	
      Description: SSM Parameter for jenkins image.	
      Tags:	
        Logical_Name: !Sub "${EnvironmentPrefix}-jenkins-image"	
  SonarAMIIDParameter:	
    Type: AWS::SSM::Parameter	
    Properties:	
      Name: !Ref SonarAMIPath	
      Type: String	
      Value: nil	
      Description: SSM Parameter for sonar image.	
      Tags:	
        Logical_Name: !Sub "${EnvironmentPrefix}-sonar-image"	
  BastionAMIIDParameter:	
    Type: AWS::SSM::Parameter	
    Properties:	
      Name: !Ref BastionAMIPath	
      Type: String	
      Value: nil	
      Description: SSM Parameter for bastion image.	
      Tags:	
        Logical_Name: !Sub "${EnvironmentPrefix}-bastion-image"	
  SlaveAMIIDParameter:	
    Type: AWS::SSM::Parameter	
    Properties:	
      Name: !Ref SlaveAMIPath	
      Type: String	
      Value: nil	
      Description: SSM Parameter for jenkins slave image.	
      Tags:	
        Logical_Name: !Sub "${EnvironmentPrefix}-slave-image"	
  Certificate:	
    Condition: HasDomainName	
    Type: AWS::CertificateManager::Certificate	
    Properties:	
      DomainName: !Ref DomainName	
      SubjectAlternativeNames:	
        - !Sub "*.${DomainName}"	
      DomainValidationOptions:	
        - DomainName: !Ref DomainName	
          HostedZoneId: !Ref HostedZoneId	
      ValidationMethod: DNS	
  VPC:	
    Type: 'AWS::EC2::VPC'	
    Properties:	
      CidrBlock: !Ref VpcBlock	
      EnableDnsSupport: true	
      EnableDnsHostnames: true	
      Tags:	
        - Key: Name	
          Value: !Sub '${EnvironmentPrefix}-VPC'	
  InternetGateway:	
    Type: 'AWS::EC2::InternetGateway'	
    Properties:	
      Tags:	
        - Key: Name	
          Value: !Sub '${EnvironmentPrefix}-IG'	
  NatGateway1EIP:	
    Type: 'AWS::EC2::EIP'	
    DependsOn: VPCGatewayAttachment	
  NatGateway1:	
    Type: 'AWS::EC2::NatGateway'	
    Properties:	
      Tags:	
        - Key: Name	
          Value: !Sub '${EnvironmentPrefix}-NG'	
      AllocationId: !GetAtt NatGateway1EIP.AllocationId	
      SubnetId: !Ref Subnet01	
  VPCGatewayAttachment:	
    Type: 'AWS::EC2::VPCGatewayAttachment'	
    Properties:	
      InternetGatewayId: !Ref InternetGateway	
      VpcId: !Ref VPC	
  RouteTable:	
    Type: 'AWS::EC2::RouteTable'	
    Properties:	
      VpcId: !Ref VPC	
      Tags:	
        - Key: Name	
          Value: !Sub '${EnvironmentPrefix}-Public-RT'	
        - Key: Network	
          Value: Public	
  RouteTablePrivate:	
    Type: 'AWS::EC2::RouteTable'	
    Properties:	
      VpcId: !Ref VPC	
      Tags:	
        - Key: Name	
          Value: !Sub '${EnvironmentPrefix}-Private-RT'	
        - Key: Network	
          Value: Private	
  Route:	
    DependsOn: VPCGatewayAttachment	
    Type: 'AWS::EC2::Route'	
    Properties:	
      RouteTableId: !Ref RouteTable	
      DestinationCidrBlock: 0.0.0.0/0	
      GatewayId: !Ref InternetGateway	
  RoutePrivate:	
    Type: 'AWS::EC2::Route'	
    Properties:	
      RouteTableId: !Ref RouteTablePrivate	
      DestinationCidrBlock: 0.0.0.0/0	
      NatGatewayId: !Ref NatGateway1	
  Subnet01:	
    Type: 'AWS::EC2::Subnet'	
    Metadata:	
      Comment: Subnet 01	
    Properties:	
      AvailabilityZone: !Select	
        - '0'	
        - !GetAZs	
          Ref: 'AWS::Region'	
      CidrBlock: !Ref Subnet01Block	
      VpcId: !Ref VPC	
      Tags:	
        - Key: Name	
          Value: !Sub '${EnvironmentPrefix}-Pub-Subnet01'	
  Subnet02:	
    Type: 'AWS::EC2::Subnet'	
    Metadata:	
      Comment: Subnet 02	
    Properties:	
      AvailabilityZone: !Select	
        - '1'	
        - !GetAZs	
          Ref: 'AWS::Region'	
      CidrBlock: !Ref Subnet02Block	
      VpcId: !Ref VPC	
      Tags:	
        - Key: Name	
          Value: !Sub '${EnvironmentPrefix}-Pub-Subnet02'	
  Subnet03:	
    Type: 'AWS::EC2::Subnet'	
    Metadata:	
      Comment: Subnet 03	
    Properties:	
      AvailabilityZone: !Select	
        - '2'	
        - !GetAZs	
          Ref: 'AWS::Region'	
      CidrBlock: !Ref Subnet03Block	
      VpcId: !Ref VPC	
      Tags:	
        - Key: Name	
          Value: !Sub '${EnvironmentPrefix}-Pub-Subnet03'	
  Subnet04:	
    Type: 'AWS::EC2::Subnet'	
    Metadata:	
      Comment: Subnet 04	
    Properties:	
      AvailabilityZone: !Select	
        - '0'	
        - !GetAZs	
          Ref: 'AWS::Region'	
      CidrBlock: !Ref Subnet04Block	
      VpcId: !Ref VPC	
      Tags:	
        - Key: Name	
          Value: !Sub '${EnvironmentPrefix}-Pri-Subnet04'	
  Subnet05:	
    Type: 'AWS::EC2::Subnet'	
    Metadata:	
      Comment: Subnet 05	
    Properties:	
      AvailabilityZone: !Select	
        - '1'	
        - !GetAZs	
          Ref: 'AWS::Region'	
      CidrBlock: !Ref Subnet05Block	
      VpcId: !Ref VPC	
      Tags:	
        - Key: Name	
          Value: !Sub '${EnvironmentPrefix}-Pri-Subnet05'	
  Subnet06:	
    Type: 'AWS::EC2::Subnet'	
    Metadata:	
      Comment: Subnet 06	
    Properties:	
      AvailabilityZone: !Select	
        - '2'	
        - !GetAZs	
          Ref: 'AWS::Region'	
      CidrBlock: !Ref Subnet06Block	
      VpcId: !Ref VPC	
      Tags:	
        - Key: Name	
          Value: !Sub '${EnvironmentPrefix}-Pri-Subnet06'	
  Subnet01RouteTableAssociation:	
    Type: 'AWS::EC2::SubnetRouteTableAssociation'	
    Properties:	
      SubnetId: !Ref Subnet01	
      RouteTableId: !Ref RouteTable	
  Subnet02RouteTableAssociation:	
    Type: 'AWS::EC2::SubnetRouteTableAssociation'	
    Properties:	
      SubnetId: !Ref Subnet02	
      RouteTableId: !Ref RouteTable	
  Subnet03RouteTableAssociation:	
    Type: 'AWS::EC2::SubnetRouteTableAssociation'	
    Properties:	
      SubnetId: !Ref Subnet03	
      RouteTableId: !Ref RouteTable	
  Subnet04RouteTableAssociation:	
    Type: 'AWS::EC2::SubnetRouteTableAssociation'	
    Properties:	
      SubnetId: !Ref Subnet04	
      RouteTableId: !Ref RouteTablePrivate	
  Subnet05RouteTableAssociation:	
    Type: 'AWS::EC2::SubnetRouteTableAssociation'	
    Properties:	
      SubnetId: !Ref Subnet05	
      RouteTableId: !Ref RouteTablePrivate	
  Subnet06RouteTableAssociation:	
    Type: 'AWS::EC2::SubnetRouteTableAssociation'	
    Properties:	
      SubnetId: !Ref Subnet06	
      RouteTableId: !Ref RouteTablePrivate	
  ALBSecurityGroup:	
    Type: 'AWS::EC2::SecurityGroup'	
    Properties:	
      Tags:	
        - Key: Name	
          Value: !Sub '${EnvironmentPrefix}-ALB-SG'	
      GroupDescription: Cluster communication with worker nodes	
      VpcId: !Ref VPC	
  NodeInstanceRole:	
    Type: "AWS::IAM::Role"	
    Properties:	
      Tags:	
        - Key: Name	
          Value: !Sub '${EnvironmentPrefix}-Node-IR'	
      AssumeRolePolicyDocument:	
        Version: "2012-10-17"	
        Statement:	
          - Effect: Allow	
            Principal:	
              Service:	
                - ec2.amazonaws.com	
            Action:	
              - "sts:AssumeRole"	
      ManagedPolicyArns:	
        - "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"	
        - "arn:aws:iam::aws:policy/AmazonEC2FullAccess"	
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"	
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"	
      Path: /	
  AssumePolicy:	
    Type: AWS::IAM::ManagedPolicy	
    Properties:	
      Path: /	
      Roles:	
        - Ref: NodeInstanceRole	
      PolicyDocument:	
        Version: '2012-10-17'	
        Statement:	
        - Effect: Allow	
          Action:	
          - sts:AssumeRole	
          Resource: "*"	
  CloudWatchPutMetricsRolePolicy:	
    Type: AWS::IAM::Policy	
    Properties:	
      PolicyName: CloudWatch_PutMetricData	
      PolicyDocument:	
        Version: '2012-10-17'	
        Statement:	
        - Sid: CloudWatchPutMetricData	
          Effect: Allow	
          Action:	
          - cloudwatch:PutMetricData	
          Resource:	
          - "*"	
      Roles:	
      - Ref: NodeInstanceRole	
  PassRolePolicy:	
    Type: AWS::IAM::Policy	
    Properties:	
      PolicyName: PassRolePolicy	
      PolicyDocument:	
        Version: '2012-10-17'	
        Statement:	
        - Sid: PassRole	
          Effect: Allow	
          Action:	
          - iam:PassRole	
          Resource:	
          - "*"	
      Roles:	
      - Ref: NodeInstanceRole	
  LambdaSSMRole:	
    Type: "AWS::IAM::Role"	
    Properties:	
      Tags:	
        - Key: Name	
          Value: !Sub '${EnvironmentPrefix}-Lambda-SSM'	
      AssumeRolePolicyDocument:	
        Version: "2012-10-17"	
        Statement:	
          - Effect: Allow	
            Principal:	
              Service:	
                - lambda.amazonaws.com	
            Action:	
              - "sts:AssumeRole"	
      ManagedPolicyArns:	
        - "arn:aws:iam::aws:policy/AmazonSSMFullAccess"	
        - "arn:aws:iam::aws:policy/AWSLambdaExecute"	
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"	
        - "arn:aws:iam::aws:policy/AmazonEC2FullAccess"	
      Path: /	
  AutomationServiceRole:	
    Type: "AWS::IAM::Role"	
    Properties:	
      RoleName: AutomationServiceRole	
      Tags:	
        - Key: Name	
          Value: !Sub '${EnvironmentPrefix}-AutomationServiceRole'	
      AssumeRolePolicyDocument:	
        Version: "2012-10-17"	
        Statement:	
          - Effect: Allow	
            Principal:	
              Service:	
                - ec2.amazonaws.com	
                - ssm.amazonaws.com	
            Action:	
              - "sts:AssumeRole"	
      ManagedPolicyArns:	
        - "arn:aws:iam::aws:policy/AmazonSSMFullAccess"	
        - "arn:aws:iam::aws:policy/AWSLambdaExecute"	
        - "arn:aws:iam::aws:policy/AmazonEC2FullAccess"	
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"	
      Path: /	
  SSMPassRolePolicy:	
    Type: AWS::IAM::Policy	
    Properties:	
      PolicyName: SSMPassRolePolicy	
      PolicyDocument:	
        Version: '2012-10-17'	
        Statement:	
        - Sid: PassRole	
          Effect: Allow	
          Action:	
          - iam:PassRole	
          Resource:	
          - !GetAtt NodeInstanceRole.Arn	
      Roles:	
      - Ref: AutomationServiceRole	
  LambdaInvokePolicy:	
    Type: AWS::IAM::Policy	
    Properties:	
      PolicyName: LambdaInvokePolicy	
      PolicyDocument:	
        Version: '2012-10-17'	
        Statement:	
        - Sid: LambdaInvoke	
          Effect: Allow	
          Action:	
          - lambda:InvokeFunction	
          Resource:	
          - "*"	
      Roles:	
      - Ref: AutomationServiceRole	
  NodeInstanceProfile:	
    Type: "AWS::IAM::InstanceProfile"	
    Properties:	
      Path: /	
      Roles:	
        - Ref: NodeInstanceRole	
  NodeSecurityGroup:	
    Type: "AWS::EC2::SecurityGroup"	
    Properties:	
      Tags:	
        - Key: Name	
          Value: !Sub '${EnvironmentPrefix}-NSG'	
      GroupDescription: Security group for all nodes in the cluster	
      VpcId: !Ref VPC	
  NodeSecurityGroupIngress:	
    Type: "AWS::EC2::SecurityGroupIngress"	
    Properties:	
      Description: Allow node to communicate with each other	
      FromPort: 0	
      GroupId: !Ref NodeSecurityGroup	
      IpProtocol: "-1"	
      SourceSecurityGroupId: !Ref NodeSecurityGroup	
      ToPort: 65535	
  NodeBastionSecurityGroupIngress:	
    Type: "AWS::EC2::SecurityGroupIngress"	
    Properties:	
      Description: Allow node to communicate with each other	
      FromPort: 22	
      GroupId: !Ref NodeSecurityGroup	
      IpProtocol: "-1"	
      SourceSecurityGroupId: !Ref BastionSecurityGroup	
      ToPort: 22	
  ALBSecurityGroupIngress443:	
    Type: "AWS::EC2::SecurityGroupIngress"	
    Properties:	
      Description: Allow internet access through SSL	
      FromPort: 443	
      CidrIp: 0.0.0.0/0	
      GroupId: !Ref ALBSecurityGroup	
      IpProtocol: tcp	
      ToPort: 443	
  ALBSecurityGroupSelfIngress:	
    Type: "AWS::EC2::SecurityGroupIngress"	
    Properties:	
      Description: Allow internet access through SSL	
      FromPort: 0	
      GroupId: !Ref ALBSecurityGroup	
      IpProtocol: "-1"	
      SourceSecurityGroupId: !Ref NodeSecurityGroup	
      ToPort: 65535	
  ALBSecurityGroupIngress80Temp:	
    Type: "AWS::EC2::SecurityGroupIngress"	
    Properties:	
      Description: Allow internet access	
      FromPort: 80	
      CidrIp: 0.0.0.0/0	
      GroupId: !Ref ALBSecurityGroup	
      IpProtocol: tcp	
      ToPort: 80	
  ALBSecurityGroupToNodeSecurityGroupEgress:	
    Type: "AWS::EC2::SecurityGroupEgress"	
    Properties:	
      Description: Allow the alb to communicate with Jenkins	
      DestinationSecurityGroupId: !Ref NodeSecurityGroup	
      FromPort: 8080	
      GroupId: !Ref ALBSecurityGroup	
      IpProtocol: tcp	
      ToPort: 8080	
  ALBSecurityGroupToNodeSecurityGroupSonarEgress:	
    Type: "AWS::EC2::SecurityGroupEgress"	
    Properties:	
      Description: Allow the alb to communicate with Sonar	
      DestinationSecurityGroupId: !Ref NodeSecurityGroup	
      FromPort: 9000	
      GroupId: !Ref ALBSecurityGroup	
      IpProtocol: tcp	
      ToPort: 9000	
  ALBSecurityGroupToNodeSecurityGroupIngress:	
    Type: "AWS::EC2::SecurityGroupIngress"	
    Properties:	
      Description: Allow the alb to communicate with Jenkins	
      SourceSecurityGroupId: !Ref ALBSecurityGroup	
      FromPort: 8080	
      GroupId: !Ref NodeSecurityGroup	
      IpProtocol: tcp	
      ToPort: 8080	
  ALBSecurityGroupToNodeSecurityGroupSonarIngress:	
    Type: "AWS::EC2::SecurityGroupIngress"	
    Properties:	
      Description: Allow the alb to communicate with Sonar	
      SourceSecurityGroupId: !Ref ALBSecurityGroup	
      FromPort: 9000	
      GroupId: !Ref NodeSecurityGroup	
      IpProtocol: tcp	
      ToPort: 9000	
  ADBSecurityGroup:	
    Type: "AWS::EC2::SecurityGroup"	
    Properties:	
      GroupDescription: Security group for db	
      VpcId: !Ref VPC	
  ADBSecurityGroupIngress:	
    Type: "AWS::EC2::SecurityGroupIngress"	
    DependsOn: ADBSecurityGroup	
    Properties:	
      Description: Allow Kube nodes to communicate with the DB	
      FromPort: 3306	
      GroupId: !Ref ADBSecurityGroup	
      IpProtocol: tcp	
      SourceSecurityGroupId: !Ref NodeSecurityGroup	
      ToPort: 3306	
  DatabaseSubnetGroup:	
    Type: AWS::RDS::DBSubnetGroup	
    Properties:	
      DBSubnetGroupDescription: CloudFormation managed DB subnet group.	
      SubnetIds:	
        - !Ref Subnet04	
        - !Ref Subnet05	
        - !Ref Subnet06	
  DatabaseCluster:	
    Type: AWS::RDS::DBCluster	
    Properties:	
      Engine: aurora-postgresql	
      DatabaseName: !Ref "DatabaseName"	
      MasterUsername: !Ref "DatabaseUsername"	
      MasterUserPassword: !Ref "DatabasePassword"	
      DBClusterParameterGroupName: default.aurora-postgresql11	
      BackupRetentionPeriod: !Ref "RDSBackupRetentionPeriod"	
      StorageEncrypted: True	
      PreferredBackupWindow: 01:00-02:00	
      PreferredMaintenanceWindow: mon:03:00-mon:04:00	
      DBSubnetGroupName: !Ref "DatabaseSubnetGroup"	
      DBClusterIdentifier: !Ref "DBClusterIdentifier"	
      VpcSecurityGroupIds:	
         -	
            !Ref "ADBSecurityGroup"	
      Tags:	
         -	
            Key: "Cluster Name"	
            Value: !Ref "DBClusterIdentifier"	
  DatabasePrimaryInstance:	
    Type: AWS::RDS::DBInstance	
    Properties:	
      Engine: aurora-postgresql	
      DBClusterIdentifier: !Ref "DatabaseCluster"	
      DBInstanceClass: !Ref "InstanceType"	
      DBParameterGroupName: default.aurora-postgresql11	
      DBSubnetGroupName: !Ref "DatabaseSubnetGroup"	
      Tags:	
         -	
            Key: "Cluster Name"	
            Value: !Ref "DBClusterIdentifier"	
  AutoScalerTarget:	
    Condition: DBReplicationRequired	
    DependsOn: DatabaseCluster	
    Type: AWS::ApplicationAutoScaling::ScalableTarget	
    Properties:	
      MinCapacity: 1	
      MaxCapacity: 8	
      ResourceId: !Sub "cluster:${DBClusterIdentifier}"	
      ScalableDimension: rds:cluster:ReadReplicaCount	
      ServiceNamespace: rds	
      RoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/rds.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_RDSCluster"	
  AutoScaler:	
    Condition: DBReplicationRequired	
    Type: AWS::ApplicationAutoScaling::ScalingPolicy	
    Properties:	
      ScalingTargetId: !Ref "AutoScalerTarget"	
      PolicyName: cicd-asg-policy	
      PolicyType: TargetTrackingScaling	
      TargetTrackingScalingPolicyConfiguration:	
        PredefinedMetricSpecification:	
          PredefinedMetricType: RDSReaderAverageCPUUtilization	
        TargetValue: 80.0	
        ScaleOutCooldown: 300	
        ScaleInCooldown: 300	
        DisableScaleIn: False	
  UpdateSSMParamFunction:	
    Type: AWS::Lambda::Function	
    Properties:	
      Code:	
        ZipFile: |	
          from __future__ import print_function	
          import json	
          import boto3	
          print('Loading function')	
          #Updates an SSM parameter	
          #Expects parameterName, parameterValue	
          def lambda_handler(event, context):	
              print("Received event: " + json.dumps(event, indent=2))	
              # get SSM client	
              client = boto3.client('ssm')	
              #confirm  parameter exists before updating it	
              response = client.describe_parameters(	
                 Filters=[	
                    {	
                     'Key': 'Name',	
                     'Values': [ event['parameterName'] ]	
                    },	
                  ]	
              )	
              if not response['Parameters']:	
                  print('No such parameter')	
                  return 'SSM parameter not found.'	
              #if parameter has a Descrition field, update it PLUS the Value	
              if 'Description' in response['Parameters'][0]:	
                  description = response['Parameters'][0]['Description']	
                  response = client.put_parameter(	
                    Name=event['parameterName'],	
                    Value=event['parameterValue'],	
                    Description=description,	
                    Type='String',	
                    Overwrite=True	
                  )	
              #otherwise just update Value	
              else:	
                  response = client.put_parameter(	
                    Name=event['parameterName'],	
                    Value=event['parameterValue'],	
                    Type='String',	
                    Overwrite=True	
                  )	
              reponseString = 'Updated parameter %s with value %s.' % (event['parameterName'], event['parameterValue'])	
              return reponseString	
      Role: !GetAtt LambdaSSMRole.Arn	
      Runtime: python3.7	
      MemorySize: 1024	
      Timeout: 120	
      Handler: index.lambda_handler	
  UpdateSSMParamFunctionPermission:	
    Type: AWS::Lambda::Permission	
    Properties:	
      FunctionName:	
        Fn::GetAtt:	
          - "UpdateSSMParamFunction"	
          - "Arn"	
      Action: 'lambda:InvokeFunction'	
      Principal: 'ssm.amazonaws.com'	
  DeleteAMIFunction:	
    Type: AWS::Lambda::Function	
    Properties:	
      Code:	
        ZipFile: |	
          import json	
          import os	
          import traceback	
          import uuid	
          import boto3	
          from botocore.exceptions import ClientError	
          from botocore.vendored import requests	
          SUCCESS = "SUCCESS"	
          FAILED = "FAILED"	
          class UnexistingAMIError(Exception):	
              pass	
          def cloudformation_handler(event, context):	
              ami_id = event['ami_id']	
              responseString = 'AMI %s is deleted.' % (ami_id)	
              try:	
                  try:	
                      delete_ami(ami_id=ami_id)	
                  except ClientError as e:	
                      error_code = get_error_code(e)	
                      print('Error code:', error_code)	
                      if error_code == 'InvalidAMIID.Malformed':	
                          responseString = 'AMI not successfully created, hence accepting delete request even if AMI ID is malformed'	
                      else:	
                          raise	
                  except UnexistingAMIError:	
                      responseString = 'AMI %s does not exist, skipping deletion. This AMI was probably deleted' % (ami_id)	
              except Exception as e:	
                  print('Got exception: ', e)	
                  responseString = str(e)	
              return responseString	
          def ensure_ami_exists(ami_id):	
              client = boto3.client('ec2')	
              resp = client.describe_images(	
                  ImageIds=[ami_id],	
              )	
              print('Describe Images response:', resp)	
              image_ids = [image['ImageId'] for image in resp['Images']]	
              if ami_id not in image_ids:	
                  raise UnexistingAMIError(f'Unexisting AMI: {ami_id}')	
          def delete_ami(ami_id):	
              ensure_ami_exists(ami_id)	
              print('Deleting ami: {ami_id}'.format(ami_id=ami_id))	
              ec2 = boto3.resource('ec2')	
              image = ec2.Image(ami_id)	
              # retrieve the mappings before deregistering the image	
              mappings = image.block_device_mappings	
              print('Got these mappings: {mappings}'.format(mappings=mappings))	
              # first we deregister the image	
              image.deregister()	
              print('Image {ami_id} deregistered'.format(ami_id=ami_id))	
              snapshot_ids = [block_device_mapping['Ebs']['SnapshotId'] for block_device_mapping in mappings]	
              print('Got snapshots {snapshot_ids}'.format(snapshot_ids=snapshot_ids))	
              for snapshot_id in snapshot_ids:	
                  ec2.Snapshot(snapshot_id).delete()	
              print('Deleted snaphots: {snapshot_ids}'.format(snapshot_ids=snapshot_ids))	
      Role: !GetAtt LambdaSSMRole.Arn	
      Runtime: python3.7	
      MemorySize: 1024	
      Timeout: 900	
      Handler: index.cloudformation_handler	
  DeleteAMIFunctionPermission:	
    Type: AWS::Lambda::Permission	
    Properties:	
      FunctionName:	
        Fn::GetAtt:	
          - "DeleteAMIFunction"	
          - "Arn"	
      Action: 'lambda:InvokeFunction'	
      Principal: 'ssm.amazonaws.com'	
  AMIAutomationInvokerFunction:	
    Type: AWS::Lambda::Function	
    Properties:	
      Code:	
        ZipFile: |	
          import json	
          import os	
          import traceback	
          import uuid	
          import boto3	
          from botocore.exceptions import ClientError	
          from botocore.vendored import requests	
          def lambda_handler(event, context):	
              resource_properties = event['ResourceProperties']	
              client = boto3.client('ssm')	
              client.start_automation_execution(	
                  DocumentName = resource_properties['AutomationName'],	
                  Parameters={	
                      'ResponseURL': [event['ResponseURL']],	
                      'StackId': [event['StackId']],	
                      'RequestId': [ event['RequestId']],	
                      'LogicalResourceId': [event['LogicalResourceId']],	
                      'RequestType': [event['RequestType']]	
                  }	
              )	
              return {'statusCode': 200}	
      Role: !GetAtt LambdaSSMRole.Arn	
      Runtime: python3.7	
      MemorySize: 1024	
      Timeout: 60	
      Handler: index.lambda_handler	
  AMIAutomationCallbackFunction:	
    Type: AWS::Lambda::Function	
    Properties:	
      Code:	
        ZipFile: |	
          import json	
          from botocore.vendored import requests	
          def lambda_handler(event,  context):	
              responseUrl = event['ResponseURL']	
              print(f'responseUrl: {responseUrl}')	
              responseBody = {}	
              responseBody['Status'] = "SUCCESS"	
              responseBody['Reason'] = "Success"	
              responseBody['StackId'] = event['StackId']	
              responseBody['RequestId'] = event['RequestId']	
              responseBody['LogicalResourceId'] = event['LogicalResourceId']	
              responseBody['PhysicalResourceId'] = event['PhysicalResourceId']	
              responseBody['Data'] = {'statusCode': 200}	
              json_responseBody = json.dumps(responseBody)	
              print("Response body:\n" + json_responseBody)	
              headers = {	
                  'content-type': '',	
                  'content-length': str(len(json_responseBody))	
              }	
              try:	
                  response = requests.put(responseUrl,	
                                          data=json_responseBody,	
                                          headers=headers)	
                  print("Status code: " + response.reason)	
              except Exception as e:	
                  print("send(..) failed executing requests.put(..): " + str(e))	
      Role: !GetAtt LambdaSSMRole.Arn	
      Runtime: python3.7	
      MemorySize: 1024	
      Timeout: 60	
      Handler: index.lambda_handler	
  CreateJenkinsImage:	
    Type: Custom::CreateJenkinsImage	
    DependsOn:	
      - JenkinsGoldenAMICreateSSMDocument	
      - JenkinsAMIIDParameter	
      - UpdateSSMParamFunction	
      - DeleteAMIFunction	
      - AMIAutomationInvokerFunction	
      - AMIAutomationCallbackFunction	
      - DeleteAMIFunctionPermission	
      - UpdateSSMParamFunctionPermission	
    Properties:	
      AutomationName: JenkinsGoldenAMICreateSSMDocument	
      ServiceToken:	
        Fn::GetAtt:	
        - AMIAutomationInvokerFunction	
        - Arn	
      Region:	
        Ref: AWS::Region	
  CreateJenkinsSlaveImage:	
    Type: Custom::CreateJenkinsSlaveImage	
    DependsOn:	
      - JenkinsSlaveGoldenAMICreateSSMDocument	
      - SlaveAMIIDParameter	
      - UpdateSSMParamFunction	
      - DeleteAMIFunction	
      - AMIAutomationInvokerFunction	
      - AMIAutomationCallbackFunction	
      - DeleteAMIFunctionPermission	
      - UpdateSSMParamFunctionPermission	
    Properties:	
      AutomationName: JenkinsSlaveGoldenAMICreateSSMDocument	
      ServiceToken:	
        Fn::GetAtt:	
        - AMIAutomationInvokerFunction	
        - Arn	
      Region:	
        Ref: AWS::Region	
  CreateBastionImage:	
    Type: Custom::CreateBastionImage	
    DependsOn:	
      - BastionGoldenAMICreateSSMDocument	
      - BastionAMIIDParameter	
      - UpdateSSMParamFunction	
      - DeleteAMIFunction	
      - AMIAutomationInvokerFunction	
      - AMIAutomationCallbackFunction	
      - DeleteAMIFunctionPermission	
      - UpdateSSMParamFunctionPermission	
    Properties:	
      AutomationName: BastionGoldenAMICreateSSMDocument	
      ServiceToken:	
        Fn::GetAtt:	
        - AMIAutomationInvokerFunction	
        - Arn	
      Region:	
        Ref: AWS::Region	
  CreateSonarImage:	
    Type: Custom::CreateSonarImage	
    DependsOn:	
      - SonarGoldenAMICreateSSMDocument	
      - SonarAMIIDParameter	
      - UpdateSSMParamFunction	
      - DeleteAMIFunction	
      - AMIAutomationInvokerFunction	
      - AMIAutomationCallbackFunction	
      - DeleteAMIFunctionPermission	
      - UpdateSSMParamFunctionPermission	
    Properties:	
      AutomationName: SonarGoldenAMICreateSSMDocument	
      ServiceToken:	
        Fn::GetAtt:	
        - AMIAutomationInvokerFunction	
        - Arn	
      Region:	
        Ref: AWS::Region	
  JenkinsGoldenAMICreateSSMDocument:	
    Type: AWS::SSM::Document	
    Properties:	
      DocumentType: Automation	
      Name: 'JenkinsGoldenAMICreateSSMDocument'	
      Content:	
        schemaVersion: '0.3'	
        description: Create a Golden AMI for CICD Jenkins.	
        assumeRole: !GetAtt AutomationServiceRole.Arn	
        parameters:	
          SourceAmiId:	
            type: String	
            description: "(Required) The source Amazon Machine Image ID."	
            default: !Sub "{{ssm:${SourceImageIDSSMParam}}}"	
          GoldAMIID:	
            type: String	
            description: "(Required) Current AMI ID"	
            default: !Sub "{{ssm:${JenkinsAMIPath}}}"	
          GoldAMISSMParam:	
            type: String	
            description: "(Required) Gold AMI SSM Param"	
            default: !Sub "${JenkinsAMIPath}"	
          ResponseURL:	
            type: String	
            description: "(Required) CF Parameter"	
          StackId:	
            type: String	
            description: "(Required) CF Parameter"	
          RequestId:	
            type: String	
            description: "(Required) CF Parameter"	
          LogicalResourceId:	
            type: String	
            description: "(Required) CF Parameter"	
          RequestType:	
            type: String	
            description: "(Required) CF Action Parameter"	
            default: "Create"	
        mainSteps:	
        - name: deleteOldImage	
          action: aws:invokeLambdaFunction	
          timeoutSeconds: 900	
          maxAttempts: 1	
          onFailure: Abort	
          inputs:	
            FunctionName: !Ref DeleteAMIFunction	
            Payload: '{"ami_id":"{{GoldAMIID}}"}'	
        - name: chooseRequestType	
          action: aws:branch	
          inputs:	
            Choices:	
            - Or:	
              - Variable: "{{RequestType}}"	
                StringEquals: Create	
              - Variable: "{{RequestType}}"	
                StringEquals: Update	
              NextStep: launchInstance	
            - NextStep: callbackStack	
              Variable: "{{RequestType}}"	
              StringEquals: Delete	
        - name: launchInstance	
          action: aws:runInstances	
          maxAttempts: 3	
          timeoutSeconds: 1200	
          onFailure: Abort	
          inputs:	
            ImageId: "{{SourceAmiId}}"	
            InstanceType: !Ref NodeInstanceType	
            SubnetId: !Ref Subnet04	
            MinInstanceCount: 1	
            MaxInstanceCount: 1	
            IamInstanceProfileName: !Ref NodeInstanceProfile	
            KeyName: !Ref KeyName	
        - name: updateOSSoftware	
          action: aws:runCommand	
          maxAttempts: 3	
          timeoutSeconds: 3600	
          onFailure: Abort	
          inputs:	
            DocumentName: AWS-RunShellScript	
            InstanceIds:	
            - "{{launchInstance.InstanceIds}}"	
            Parameters:	
              commands:	
                - yum update -y	
        - name: installCustomizations	
          action: aws:runCommand	
          maxAttempts: 3	
          timeoutSeconds: 600	
          onFailure: Abort	
          inputs:	
            DocumentName: AWS-RunShellScript	
            InstanceIds:	
            - "{{launchInstance.InstanceIds}}"	
            Parameters:	
              commands:	
                - yum install -y java-11-amazon-corretto	
                - yum -y install jq git docker python3-pip	
                - usermod -a -G docker ec2-user	
                - pip3 install stacker	
                - systemctl enable docker	
                - systemctl start docker	
                - curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.18.9/2020-11-02/bin/linux/amd64/kubectl	
                - chmod +x ./kubectl	
                - mv kubectl /usr/bin/kubectl	
                - curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.18.9/2020-11-02/bin/linux/amd64/aws-iam-authenticator	
                - chmod +x ./aws-iam-authenticator	
                - mv aws-iam-authenticator /usr/bin/aws-iam-authenticator	
                - wget https://get.helm.sh/helm-v3.4.1-linux-amd64.tar.gz	
                - tar -zxvf helm-v3.4.1-linux-amd64.tar.gz	
                - chmod +x linux-amd64/helm	
                - mv linux-amd64/helm /usr/local/bin/helm	
                - rm -rf linux-amd64	
                - rm helm-v3.4.1-linux-amd64.tar.gz	
                - wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo	
                - rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key	
                - yum -y install jenkins	
                - usermod -a -G docker jenkins	
                - systemctl enable jenkins	
                - touch /home/ec2-user/jenkins-installed	
                - chmod 755 /home/ec2-user/jenkins-installed	
        - name: installInspectorAgent	
          action: aws:runCommand	
          maxAttempts: 3	
          timeoutSeconds: 600	
          onFailure: Abort	
          inputs:	
            DocumentName: AmazonInspector-ManageAWSAgent	
            InstanceIds:	
            - "{{launchInstance.InstanceIds}}"	
            Parameters:	
              Operation: Install	
        - name: installUnifiedCloudWatchAgent	
          action: aws:runCommand	
          maxAttempts: 3	
          timeoutSeconds: 600	
          onFailure: Abort	
          inputs:	
            DocumentName: AWS-ConfigureAWSPackage	
            InstanceIds:	
            - "{{launchInstance.InstanceIds}}"	
            Parameters:	
              name: AmazonCloudWatchAgent	
              action: Install	
        - name: stopInstance	
          action: aws:changeInstanceState	
          maxAttempts: 3	
          timeoutSeconds: 1200	
          onFailure: Abort	
          inputs:	
            InstanceIds:	
            - "{{launchInstance.InstanceIds}}"	
            DesiredState: stopped	
        - name: createImage	
          action: aws:createImage	
          maxAttempts: 3	
          onFailure: Abort	
          inputs:	
            InstanceId: "{{launchInstance.InstanceIds}}"	
            ImageName: "{{global:DATE_TIME}}_Jenkins_CICD"	
            NoReboot: true	
            ImageDescription: !Sub "AMI Generated by EC2 Automation on {{global:DATE_TIME}} from {{SourceAmiId}}"	
        - name: createEncryptedCopy	
          action: aws:copyImage	
          maxAttempts: 3	
          onFailure: Abort	
          inputs:	
            SourceImageId: "{{createImage.ImageId}}"	
            SourceRegion: "{{global:REGION}}"	
            ImageName: "{{global:DATE_TIME}}_Jenkins_CICD_Encrypted"	
            ImageDescription: Encrypted GoldenAMI by SSM Automation on {{global:DATE_TIME}} from source AMI {{createImage.ImageId}}	
            Encrypted: true	
        - name: createTagsForEncryptedImage	
          action: aws:createTags	
          maxAttempts: 1	
          onFailure: Continue	
          inputs:	
            ResourceType: EC2	
            ResourceIds:	
            - "{{createEncryptedCopy.ImageId}}"	
            Tags:	
            - Key: Automation-Id	
              Value: "{{automation:EXECUTION_ID}}"	
            - Key: Owner	
              Value: Mystique	
            - Key: SourceAMI	
              Value: "{{SourceAmiId}}"	
            - Key: Amazon-Inspector	
              Value: 'true'	
            - Key: Amazon-SSM	
              Value: 'true'	
            - Key: Encrypted	
              Value: 'true'	
            - Key: Name	
              Value: "{{global:DATE_TIME}}_Jenkins_CICD_Encrypted"	
        - name: updateSsmParam	
          action: aws:invokeLambdaFunction	
          timeoutSeconds: 1200	
          maxAttempts: 1	
          onFailure: Abort	
          inputs:	
            FunctionName: !Ref UpdateSSMParamFunction	
            Payload: '{"parameterName":"{{GoldAMISSMParam}}", "parameterValue":"{{createEncryptedCopy.ImageId}}"}'	
        - name: terminateInstance	
          action: aws:changeInstanceState	
          maxAttempts: 3	
          onFailure: Continue	
          inputs:	
            InstanceIds:	
            - "{{launchInstance.InstanceIds}}"	
            DesiredState: terminated	
        - name: deleteUnEcryptedImage	
          action: aws:invokeLambdaFunction	
          timeoutSeconds: 900	
          maxAttempts: 1	
          onFailure: Abort	
          inputs:	
            FunctionName: !Ref DeleteAMIFunction	
            Payload: '{"ami_id":"{{createImage.ImageId}}"}'	
        - name: callbackStack	
          action: aws:invokeLambdaFunction	
          timeoutSeconds: 900	
          maxAttempts: 1	
          onFailure: Abort	
          inputs:	
            FunctionName: !Ref AMIAutomationCallbackFunction	
            Payload: '{"ResponseURL":"{{ResponseURL}}", "StackId":"{{StackId}}", "LogicalResourceId":"{{LogicalResourceId}}", "RequestId":"{{RequestId}}", "PhysicalResourceId":"{{createEncryptedCopy.ImageId}}"}'	
        outputs:	
        - createEncryptedCopy.ImageId	
  SonarGoldenAMICreateSSMDocument:	
    Type: AWS::SSM::Document	
    Properties:	
      DocumentType: Automation	
      Name: 'SonarGoldenAMICreateSSMDocument'	
      Content:	
        schemaVersion: '0.3'	
        description: Create a Golden AMI for CICD Sonar.	
        assumeRole: !GetAtt AutomationServiceRole.Arn	
        parameters:	
          SourceAmiId:	
            type: String	
            description: "(Required) The source Amazon Machine Image ID."	
            default: !Sub "{{ssm:${SourceImageIDSSMParam}}}"	
          GoldAMIID:	
            type: String	
            description: "(Required) Current AMI ID"	
            default: !Sub "{{ssm:${SonarAMIPath}}}"	
          GoldAMISSMParam:	
            type: String	
            description: "(Required) Gold AMI SSM Param"	
            default: !Sub "${SonarAMIPath}"	
          ResponseURL:	
            type: String	
            description: "(Required) CF Parameter"	
          StackId:	
            type: String	
            description: "(Required) CF Parameter"	
          RequestId:	
            type: String	
            description: "(Required) CF Parameter"	
          LogicalResourceId:	
            type: String	
            description: "(Required) CF Parameter"	
          RequestType:	
            type: String	
            description: "(Required) CF Action Parameter"	
            default: "Create"	
        mainSteps:	
        - name: deleteOldImage	
          action: aws:invokeLambdaFunction	
          timeoutSeconds: 900	
          maxAttempts: 1	
          onFailure: Abort	
          inputs:	
            FunctionName: !Ref DeleteAMIFunction	
            Payload: '{"ami_id":"{{GoldAMIID}}"}'	
        - name: chooseRequestType	
          action: aws:branch	
          inputs:	
            Choices:	
            - Or:	
              - Variable: "{{RequestType}}"	
                StringEquals: Create	
              - Variable: "{{RequestType}}"	
                StringEquals: Update	
              NextStep: launchInstance	
            - NextStep: callbackStack	
              Variable: "{{RequestType}}"	
              StringEquals: Delete	
        - name: launchInstance	
          action: aws:runInstances	
          maxAttempts: 3	
          timeoutSeconds: 1200	
          onFailure: Abort	
          inputs:	
            ImageId: "{{SourceAmiId}}"	
            InstanceType: !Ref SonarInstanceType	
            SubnetId: !Ref Subnet04	
            MinInstanceCount: 1	
            MaxInstanceCount: 1	
            IamInstanceProfileName: !Ref NodeInstanceProfile	
            KeyName: !Ref KeyName	
        - name: updateOSSoftware	
          action: aws:runCommand	
          maxAttempts: 3	
          timeoutSeconds: 3600	
          onFailure: Abort	
          inputs:	
            DocumentName: AWS-RunShellScript	
            InstanceIds:	
            - "{{launchInstance.InstanceIds}}"	
            Parameters:	
              commands:	
                - yum update -y	
        - name: installCustomizations	
          action: aws:runCommand	
          maxAttempts: 3	
          timeoutSeconds: 600	
          onFailure: Abort	
          inputs:	
            DocumentName: AWS-RunShellScript	
            InstanceIds:	
            - "{{launchInstance.InstanceIds}}"	
            Parameters:	
              commands:	
                - yum install -y java-11-amazon-corretto postgresql	
                - groupadd sonar	
                - useradd -c "Sonar System User" -d /opt/sonarqube -g sonar -s /bin/bash sonar	
                - wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-8.5.1.38104.zip	
                - unzip sonarqube-8.5.1.38104.zip	
                - mkdir /opt/sonarqube	
                - mv sonarqube-8.5.1.38104/* /opt/sonarqube/	
                - chown -R sonar:sonar /opt/sonarqube	
                - chmod -R 775 /opt/sonarqube	
                - |	
                    cat << EOF >> /etc/security/limits.conf	
                    *  soft    nofile  65536	
                    *  hard    nofile  65536	
                    sonar   soft    nofile  65536	
                    sonar   hard    nofile  65536	
                    sonar   memlock unlimited	
                    EOF	
                - |	
                    cat << EOF >> /etc/init.d/sonar	
                    #!/bin/sh	
                    #	
                    # rc file for SonarQube	
                    #	
                    # chkconfig: 345 96 10	
                    # description: SonarQube system (www.sonarsource.org)	
                    #	
                    ### BEGIN INIT INFO	
                    # Provides: sonar	
                    # Required-Start: \$network	
                    # Required-Stop: \$network	
                    # Default-Start: 3 4 5	
                    # Default-Stop: 0 1 2 6	
                    # Short-Description: SonarQube system (www.sonarsource.org)	
                    # Description: SonarQube system (www.sonarsource.org)	
                    ### END INIT INFO	
                    sudo -u sonar /opt/sonarqube/bin/linux-x86-64/sonar.sh \$*	
                    EOF	
                - chmod +x /etc/init.d/sonar	
                - |	
                    cat << EOF >> /etc/sysctl.conf	
                    vm.max_map_count=262144	
                    fs.file-max = 2097152	
                    EOF	
                - sysctl -p	
                - systemctl enable sonar	
        - name: installInspectorAgent	
          action: aws:runCommand	
          maxAttempts: 3	
          timeoutSeconds: 600	
          onFailure: Abort	
          inputs:	
            DocumentName: AmazonInspector-ManageAWSAgent	
            InstanceIds:	
            - "{{launchInstance.InstanceIds}}"	
            Parameters:	
              Operation: Install	
        - name: installUnifiedCloudWatchAgent	
          action: aws:runCommand	
          maxAttempts: 3	
          timeoutSeconds: 600	
          onFailure: Abort	
          inputs:	
            DocumentName: AWS-ConfigureAWSPackage	
            InstanceIds:	
            - "{{launchInstance.InstanceIds}}"	
            Parameters:	
              name: AmazonCloudWatchAgent	
              action: Install	
        - name: stopInstance	
          action: aws:changeInstanceState	
          maxAttempts: 3	
          timeoutSeconds: 1200	
          onFailure: Abort	
          inputs:	
            InstanceIds:	
            - "{{launchInstance.InstanceIds}}"	
            DesiredState: stopped	
        - name: createImage	
          action: aws:createImage	
          maxAttempts: 3	
          onFailure: Abort	
          inputs:	
            InstanceId: "{{launchInstance.InstanceIds}}"	
            ImageName: "{{global:DATE_TIME}}_Sonar_CICD"	
            NoReboot: true	
            ImageDescription: !Sub "AMI Generated by EC2 Automation on {{global:DATE_TIME}} from {{SourceAmiId}}"	
        - name: createEncryptedCopy	
          action: aws:copyImage	
          maxAttempts: 3	
          onFailure: Abort	
          inputs:	
            SourceImageId: "{{createImage.ImageId}}"	
            SourceRegion: "{{global:REGION}}"	
            ImageName: "{{global:DATE_TIME}}_Sonar_CICD_Encrypted"	
            ImageDescription: Encrypted GoldenAMI by SSM Automation on {{global:DATE_TIME}} from source AMI {{createImage.ImageId}}	
            Encrypted: true	
        - name: createTagsForEncryptedImage	
          action: aws:createTags	
          maxAttempts: 1	
          onFailure: Continue	
          inputs:	
            ResourceType: EC2	
            ResourceIds:	
            - "{{createEncryptedCopy.ImageId}}"	
            Tags:	
            - Key: Automation-Id	
              Value: "{{automation:EXECUTION_ID}}"	
            - Key: Owner	
              Value: Mystique	
            - Key: SourceAMI	
              Value: "{{SourceAmiId}}"	
            - Key: Amazon-Inspector	
              Value: 'true'	
            - Key: Amazon-SSM	
              Value: 'true'	
            - Key: Encrypted	
              Value: 'true'	
            - Key: Name	
              Value: "{{global:DATE_TIME}}_Sonar_CICD_Encrypted"	
        - name: updateSsmParam	
          action: aws:invokeLambdaFunction	
          timeoutSeconds: 1200	
          maxAttempts: 1	
          onFailure: Abort	
          inputs:	
            FunctionName: !Ref UpdateSSMParamFunction	
            Payload: '{"parameterName":"{{GoldAMISSMParam}}", "parameterValue":"{{createEncryptedCopy.ImageId}}"}'	
        - name: terminateInstance	
          action: aws:changeInstanceState	
          maxAttempts: 3	
          onFailure: Continue	
          inputs:	
            InstanceIds:	
            - "{{launchInstance.InstanceIds}}"	
            DesiredState: terminated	
        - name: deleteUnEcryptedImage	
          action: aws:invokeLambdaFunction	
          timeoutSeconds: 900	
          maxAttempts: 1	
          onFailure: Abort	
          inputs:	
            FunctionName: !Ref DeleteAMIFunction	
            Payload: '{"ami_id":"{{createImage.ImageId}}"}'	
        - name: callbackStack	
          action: aws:invokeLambdaFunction	
          timeoutSeconds: 900	
          maxAttempts: 1	
          onFailure: Abort	
          inputs:	
            FunctionName: !Ref AMIAutomationCallbackFunction	
            Payload: '{"ResponseURL":"{{ResponseURL}}", "StackId":"{{StackId}}", "LogicalResourceId":"{{LogicalResourceId}}", "RequestId":"{{RequestId}}", "PhysicalResourceId":"{{createEncryptedCopy.ImageId}}"}'	
        outputs:	
        - createEncryptedCopy.ImageId	
  JenkinsSlaveGoldenAMICreateSSMDocument:	
    Type: AWS::SSM::Document	
    Properties:	
      DocumentType: Automation	
      Name: 'JenkinsSlaveGoldenAMICreateSSMDocument'	
      Content:	
        schemaVersion: '0.3'	
        description: Create a Golden AMI for CICD Jenkins.	
        assumeRole: !GetAtt AutomationServiceRole.Arn	
        parameters:	
          SourceAmiId:	
            type: String	
            description: "(Required) The source Amazon Machine Image ID."	
            default: !Sub "{{ssm:${SourceImageIDSSMParam}}}"	
          GoldAMIID:	
            type: String	
            description: "(Required) Current AMI ID"	
            default: !Sub "{{ssm:${SlaveAMIPath}}}"	
          GoldAMISSMParam:	
            type: String	
            description: "(Required) Gold AMI SSM Param"	
            default: !Sub "${SlaveAMIPath}"	
          ResponseURL:	
            type: String	
            description: "(Required) CF Parameter"	
          StackId:	
            type: String	
            description: "(Required) CF Parameter"	
          RequestId:	
            type: String	
            description: "(Required) CF Parameter"	
          LogicalResourceId:	
            type: String	
            description: "(Required) CF Parameter"	
          RequestType:	
            type: String	
            description: "(Required) CF Action Parameter"	
            default: "Create"	
        mainSteps:	
        - name: deleteOldImage	
          action: aws:invokeLambdaFunction	
          timeoutSeconds: 900	
          maxAttempts: 1	
          onFailure: Abort	
          inputs:	
            FunctionName: !Ref DeleteAMIFunction	
            Payload: '{"ami_id":"{{GoldAMIID}}"}'	
        - name: chooseRequestType	
          action: aws:branch	
          inputs:	
            Choices:	
            - Or:	
              - Variable: "{{RequestType}}"	
                StringEquals: Create	
              - Variable: "{{RequestType}}"	
                StringEquals: Update	
              NextStep: launchInstance	
            - NextStep: callbackStack	
              Variable: "{{RequestType}}"	
              StringEquals: Delete	
        - name: launchInstance	
          action: aws:runInstances	
          maxAttempts: 3	
          timeoutSeconds: 1200	
          onFailure: Abort	
          inputs:	
            ImageId: "{{SourceAmiId}}"	
            InstanceType: !Ref SlaveInstanceType	
            SubnetId: !Ref Subnet04	
            MinInstanceCount: 1	
            MaxInstanceCount: 1	
            IamInstanceProfileName: !Ref NodeInstanceProfile	
            KeyName: !Ref KeyName	
        - name: updateOSSoftware	
          action: aws:runCommand	
          maxAttempts: 3	
          timeoutSeconds: 3600	
          onFailure: Abort	
          inputs:	
            DocumentName: AWS-RunShellScript	
            InstanceIds:	
            - "{{launchInstance.InstanceIds}}"	
            Parameters:	
              commands:	
                - yum update -y	
        - name: installCustomizations	
          action: aws:runCommand	
          maxAttempts: 3	
          timeoutSeconds: 600	
          onFailure: Abort	
          inputs:	
            DocumentName: AWS-RunShellScript	
            InstanceIds:	
            - "{{launchInstance.InstanceIds}}"	
            Parameters:	
              commands:	
                - yum install -y java-11-amazon-corretto	
                - yum -y install jq git docker python3-pip	
                - usermod -a -G docker ec2-user	
                - pip3 install stacker	
                - systemctl enable docker	
                - systemctl start docker	
                - curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.18.9/2020-11-02/bin/linux/amd64/kubectl	
                - chmod +x ./kubectl	
                - mv kubectl /usr/bin/kubectl	
                - curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.18.9/2020-11-02/bin/linux/amd64/aws-iam-authenticator	
                - chmod +x ./aws-iam-authenticator	
                - mv aws-iam-authenticator /usr/bin/aws-iam-authenticator	
                - wget https://get.helm.sh/helm-v3.4.1-linux-amd64.tar.gz	
                - tar -zxvf helm-v3.4.1-linux-amd64.tar.gz	
                - chmod +x linux-amd64/helm	
                - mv linux-amd64/helm /usr/local/bin/helm	
                - rm -rf linux-amd64	
                - rm helm-v3.4.1-linux-amd64.tar.gz	
        - name: installInspectorAgent	
          action: aws:runCommand	
          maxAttempts: 3	
          timeoutSeconds: 600	
          onFailure: Abort	
          inputs:	
            DocumentName: AmazonInspector-ManageAWSAgent	
            InstanceIds:	
            - "{{launchInstance.InstanceIds}}"	
            Parameters:	
              Operation: Install	
        - name: installUnifiedCloudWatchAgent	
          action: aws:runCommand	
          maxAttempts: 3	
          timeoutSeconds: 600	
          onFailure: Abort	
          inputs:	
            DocumentName: AWS-ConfigureAWSPackage	
            InstanceIds:	
            - "{{launchInstance.InstanceIds}}"	
            Parameters:	
              name: AmazonCloudWatchAgent	
              action: Install	
        - name: stopInstance	
          action: aws:changeInstanceState	
          maxAttempts: 3	
          timeoutSeconds: 1200	
          onFailure: Abort	
          inputs:	
            InstanceIds:	
            - "{{launchInstance.InstanceIds}}"	
            DesiredState: stopped	
        - name: createImage	
          action: aws:createImage	
          maxAttempts: 3	
          onFailure: Abort	
          inputs:	
            InstanceId: "{{launchInstance.InstanceIds}}"	
            ImageName: "{{global:DATE_TIME}}_JenkinsSlave_CICD"	
            NoReboot: true	
            ImageDescription: !Sub "AMI Generated by EC2 Automation on {{global:DATE_TIME}} from {{SourceAmiId}}"	
        - name: createEncryptedCopy	
          action: aws:copyImage	
          maxAttempts: 3	
          onFailure: Abort	
          inputs:	
            SourceImageId: "{{createImage.ImageId}}"	
            SourceRegion: "{{global:REGION}}"	
            ImageName: "{{global:DATE_TIME}}_JenkinsSlave_CICD_Encrypted"	
            ImageDescription: Encrypted GoldenAMI by SSM Automation on {{global:DATE_TIME}} from source AMI {{createImage.ImageId}}	
            Encrypted: true	
        - name: createTagsForEncryptedImage	
          action: aws:createTags	
          maxAttempts: 1	
          onFailure: Continue	
          inputs:	
            ResourceType: EC2	
            ResourceIds:	
            - "{{createEncryptedCopy.ImageId}}"	
            Tags:	
            - Key: Automation-Id	
              Value: "{{automation:EXECUTION_ID}}"	
            - Key: Owner	
              Value: Mystique	
            - Key: SourceAMI	
              Value: "{{SourceAmiId}}"	
            - Key: Amazon-Inspector	
              Value: 'true'	
            - Key: Amazon-SSM	
              Value: 'true'	
            - Key: Encrypted	
              Value: 'true'	
            - Key: Name	
              Value: "{{global:DATE_TIME}}_JenkinsSlave_CICD_Encrypted"	
        - name: updateSsmParam	
          action: aws:invokeLambdaFunction	
          timeoutSeconds: 1200	
          maxAttempts: 1	
          onFailure: Abort	
          inputs:	
            FunctionName: !Ref UpdateSSMParamFunction	
            Payload: '{"parameterName":"{{GoldAMISSMParam}}", "parameterValue":"{{createEncryptedCopy.ImageId}}"}'	
        - name: terminateInstance	
          action: aws:changeInstanceState	
          maxAttempts: 3	
          onFailure: Continue	
          inputs:	
            InstanceIds:	
            - "{{launchInstance.InstanceIds}}"	
            DesiredState: terminated	
        - name: deleteUnEcryptedImage	
          action: aws:invokeLambdaFunction	
          timeoutSeconds: 900	
          maxAttempts: 1	
          onFailure: Abort	
          inputs:	
            FunctionName: !Ref DeleteAMIFunction	
            Payload: '{"ami_id":"{{createImage.ImageId}}"}'	
        - name: callbackStack	
          action: aws:invokeLambdaFunction	
          timeoutSeconds: 900	
          maxAttempts: 1	
          onFailure: Abort	
          inputs:	
            FunctionName: !Ref AMIAutomationCallbackFunction	
            Payload: '{"ResponseURL":"{{ResponseURL}}", "StackId":"{{StackId}}", "LogicalResourceId":"{{LogicalResourceId}}", "RequestId":"{{RequestId}}", "PhysicalResourceId":"{{createEncryptedCopy.ImageId}}"}'	
        outputs:	
        - createEncryptedCopy.ImageId	
  BastionGoldenAMICreateSSMDocument:	
    Type: AWS::SSM::Document	
    Properties:	
      DocumentType: Automation	
      Name: 'BastionGoldenAMICreateSSMDocument'	
      Content:	
        schemaVersion: '0.3'	
        description: Create a Golden AMI for CICD Bastion.	
        assumeRole: !GetAtt AutomationServiceRole.Arn	
        parameters:	
          SourceAmiId:	
            type: String	
            description: "(Required) The source Amazon Machine Image ID."	
            default: !Sub "{{ssm:${SourceImageIDSSMParam}}}"	
          GoldAMIID:	
            type: String	
            description: "(Required) Current AMI ID"	
            default: !Sub "{{ssm:${BastionAMIPath}}}"	
          GoldAMISSMParam:	
            type: String	
            description: "(Required) Gold AMI SSM Param"	
            default: !Sub "${BastionAMIPath}"	
          ResponseURL:	
            type: String	
            description: "(Required) CF Parameter"	
          StackId:	
            type: String	
            description: "(Required) CF Parameter"	
          RequestId:	
            type: String	
            description: "(Required) CF Parameter"	
          LogicalResourceId:	
            type: String	
            description: "(Required) CF Parameter"	
          RequestType:	
            type: String	
            description: "(Required) CF Action Parameter"	
            default: "Create"	
        mainSteps:	
        - name: deleteOldImage	
          action: aws:invokeLambdaFunction	
          timeoutSeconds: 900	
          maxAttempts: 1	
          onFailure: Abort	
          inputs:	
            FunctionName: !Ref DeleteAMIFunction	
            Payload: '{"ami_id":"{{GoldAMIID}}"}'	
        - name: chooseRequestType	
          action: aws:branch	
          inputs:	
            Choices:	
            - Or:	
              - Variable: "{{RequestType}}"	
                StringEquals: Create	
              - Variable: "{{RequestType}}"	
                StringEquals: Update	
              NextStep: launchInstance	
            - NextStep: callbackStack	
              Variable: "{{RequestType}}"	
              StringEquals: Delete	
        - name: launchInstance	
          action: aws:runInstances	
          maxAttempts: 3	
          timeoutSeconds: 1200	
          onFailure: Abort	
          inputs:	
            ImageId: "{{SourceAmiId}}"	
            InstanceType: !Ref BastionInstanceType	
            SubnetId: !Ref Subnet04	
            MinInstanceCount: 1	
            MaxInstanceCount: 1	
            IamInstanceProfileName: !Ref NodeInstanceProfile	
            KeyName: !Ref KeyName	
        - name: updateOSSoftware	
          action: aws:runCommand	
          maxAttempts: 3	
          timeoutSeconds: 3600	
          onFailure: Abort	
          inputs:	
            DocumentName: AWS-RunShellScript	
            InstanceIds:	
            - "{{launchInstance.InstanceIds}}"	
            Parameters:	
              commands:	
                - yum update -y	
        - name: installCustomizations	
          action: aws:runCommand	
          maxAttempts: 3	
          timeoutSeconds: 600	
          onFailure: Abort	
          inputs:	
            DocumentName: AWS-RunShellScript	
            InstanceIds:	
            - "{{launchInstance.InstanceIds}}"	
            Parameters:	
              commands:	
                - yum install -y java-11-amazon-corretto	
                - yum -y install jq git docker python3-pip	
                - usermod -a -G docker ec2-user	
                - pip3 install stacker	
                - systemctl enable docker	
                - systemctl start docker	
                - curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.18.9/2020-11-02/bin/linux/amd64/kubectl	
                - chmod +x ./kubectl	
                - mv kubectl /usr/bin/kubectl	
                - curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.18.9/2020-11-02/bin/linux/amd64/aws-iam-authenticator	
                - chmod +x ./aws-iam-authenticator	
                - mv aws-iam-authenticator /usr/bin/aws-iam-authenticator	
                - wget https://get.helm.sh/helm-v3.4.1-linux-amd64.tar.gz	
                - tar -zxvf helm-v3.4.1-linux-amd64.tar.gz	
                - chmod +x linux-amd64/helm	
                - mv linux-amd64/helm /usr/local/bin/helm	
                - rm -rf linux-amd64	
                - rm helm-v3.4.1-linux-amd64.tar.gz	
                - mkdir /home/ec2-user/ssh-keys	
                - !Sub |	
                    cat << EOF >> /home/ec2-user/ssh-keys/cicd.pem	
                    ${EC2SlaveKey}	
                    EOF	
                - |	
                    eol=$'\n'	
                    read -r key < /home/ec2-user/ssh-keys/cicd.pem	
                    echo "${key//\\n/$eol}" > /home/ec2-user/ssh-keys/cicd.pem	
                - echo "${key//\\n/$eol}"	
                - sed -i -e "s|\\n|\r|g" /home/ec2-user/ssh-keys/cicd.pem	
                - chmod 600 /home/ec2-user/ssh-keys/cicd.pem	
                - |	
                    cat << EOF >> /home/ec2-user/.bashrc	
                    source .profile	
                    EOF	
                - !Sub |	
                    cat << EOF >> /home/ec2-user/.profile	
                    function switchAccount {	
                        aws sts get-caller-identity	
                        ACC=\$1	
                        PROFILE=\$2	
                        temp_role=\$(aws sts assume-role --role-arn "arn:aws:iam::\$ACC:role/AWSControlTowerExecution" --role-session-name "userAct-\$ACC")	
                        AWS_ACCESS_KEY_ID=\$(echo \$temp_role | jq .Credentials.AccessKeyId | xargs)	
                        AWS_SECRET_ACCESS_KEY=\$(echo \$temp_role | jq .Credentials.SecretAccessKey | xargs)	
                        AWS_SESSION_TOKEN=\$(echo \$temp_role | jq .Credentials.SessionToken | xargs)	
                        aws configure --profile \$PROFILE set aws_access_key_id \$AWS_ACCESS_KEY_ID	
                        aws configure --profile \$PROFILE set aws_secret_access_key \$AWS_SECRET_ACCESS_KEY	
                        aws configure --profile \$PROFILE set aws_session_token \$AWS_SESSION_TOKEN	
                        aws --profile \$PROFILE sts get-caller-identity	
                    }	
                    alias upKubeDev='aws --profile dev eks --region ${AWS::Region} update-kubeconfig --name \$DEV_EKS_NAME'	
                    alias switchDev='switchAccount \$DEV_ACCOUNT_ID dev && upKubeDev'	
                    alias switchShared='switchAccount ${AWS::AccountId} shared'	
                    function login {	
                        ssh -i /home/ec2-user/ssh-keys/cicd.pem ec2-user@\$1	
                    }	
                    function copyTo {	
                        scp -i /home/ec2-user/ssh-keys/cicd.pem \$1 ec2-user@\$2:~/	
                    }	
                    function copyFrom {	
                        ssh -i /home/ec2-user/ssh-keys/cicd.pem ec2-user@\$1:\$2 .	
                    }	
                    EOF	
                - chown ec2-user:ec2-user -R /home/ec2-user/	
        - name: installInspectorAgent	
          action: aws:runCommand	
          maxAttempts: 3	
          timeoutSeconds: 600	
          onFailure: Abort	
          inputs:	
            DocumentName: AmazonInspector-ManageAWSAgent	
            InstanceIds:	
            - "{{launchInstance.InstanceIds}}"	
            Parameters:	
              Operation: Install	
        - name: installUnifiedCloudWatchAgent	
          action: aws:runCommand	
          maxAttempts: 3	
          timeoutSeconds: 600	
          onFailure: Abort	
          inputs:	
            DocumentName: AWS-ConfigureAWSPackage	
            InstanceIds:	
            - "{{launchInstance.InstanceIds}}"	
            Parameters:	
              name: AmazonCloudWatchAgent	
              action: Install	
        - name: stopInstance	
          action: aws:changeInstanceState	
          maxAttempts: 3	
          timeoutSeconds: 1200	
          onFailure: Abort	
          inputs:	
            InstanceIds:	
            - "{{launchInstance.InstanceIds}}"	
            DesiredState: stopped	
        - name: createImage	
          action: aws:createImage	
          maxAttempts: 3	
          onFailure: Abort	
          inputs:	
            InstanceId: "{{launchInstance.InstanceIds}}"	
            ImageName: "{{global:DATE_TIME}}_Bastion_CICD"	
            NoReboot: true	
            ImageDescription: !Sub "AMI Generated by EC2 Automation on {{global:DATE_TIME}} from {{SourceAmiId}}"	
        - name: createEncryptedCopy	
          action: aws:copyImage	
          maxAttempts: 3	
          onFailure: Abort	
          inputs:	
            SourceImageId: "{{createImage.ImageId}}"	
            SourceRegion: "{{global:REGION}}"	
            ImageName: "{{global:DATE_TIME}}_Bastion_CICD_Encrypted"	
            ImageDescription: Encrypted GoldenAMI by SSM Automation on {{global:DATE_TIME}} from source AMI {{createImage.ImageId}}	
            Encrypted: true	
        - name: createTagsForEncryptedImage	
          action: aws:createTags	
          maxAttempts: 1	
          onFailure: Continue	
          inputs:	
            ResourceType: EC2	
            ResourceIds:	
            - "{{createEncryptedCopy.ImageId}}"	
            Tags:	
            - Key: Automation-Id	
              Value: "{{automation:EXECUTION_ID}}"	
            - Key: Owner	
              Value: Mystique	
            - Key: SourceAMI	
              Value: "{{SourceAmiId}}"	
            - Key: Amazon-Inspector	
              Value: 'true'	
            - Key: Amazon-SSM	
              Value: 'true'	
            - Key: Encrypted	
              Value: 'true'	
            - Key: Name	
              Value: "{{global:DATE_TIME}}_Bastion_CICD_Encrypted"	
        - name: updateSsmParam	
          action: aws:invokeLambdaFunction	
          timeoutSeconds: 1200	
          maxAttempts: 1	
          onFailure: Abort	
          inputs:	
            FunctionName: !Ref UpdateSSMParamFunction	
            Payload: '{"parameterName":"{{GoldAMISSMParam}}", "parameterValue":"{{createEncryptedCopy.ImageId}}"}'	
        - name: terminateInstance	
          action: aws:changeInstanceState	
          maxAttempts: 3	
          onFailure: Continue	
          inputs:	
            InstanceIds:	
            - "{{launchInstance.InstanceIds}}"	
            DesiredState: terminated	
        - name: deleteUnEcryptedImage	
          action: aws:invokeLambdaFunction	
          timeoutSeconds: 900	
          maxAttempts: 1	
          onFailure: Abort	
          inputs:	
            FunctionName: !Ref DeleteAMIFunction	
            Payload: '{"ami_id":"{{createImage.ImageId}}"}'	
        - name: callbackStack	
          action: aws:invokeLambdaFunction	
          timeoutSeconds: 900	
          maxAttempts: 1	
          onFailure: Abort	
          inputs:	
            FunctionName: !Ref AMIAutomationCallbackFunction	
            Payload: '{"ResponseURL":"{{ResponseURL}}", "StackId":"{{StackId}}", "LogicalResourceId":"{{LogicalResourceId}}", "RequestId":"{{RequestId}}", "PhysicalResourceId":"{{createEncryptedCopy.ImageId}}"}'	
        outputs:	
        - createEncryptedCopy.ImageId	
  WaitHandle:	
    Type: AWS::CloudFormation::WaitConditionHandle	
  WaitCondition:	
    DependsOn:	
      - NodeLaunchConfig	
    Type: AWS::CloudFormation::WaitCondition	
    Properties:	
      Handle: !Ref WaitHandle	
      Timeout: '7200'	
      Count: 2	
  NodeLaunchConfig:	
    Type: "AWS::AutoScaling::LaunchConfiguration"	
    DependsOn:	
      - FileSystem	
      - MountTargetA	
      - MountTargetB	
      - MountTargetC	
      - JenkinsLoadBalancer	
      - CreateJenkinsImage	
      - CreateJenkinsSlaveImage	
    Metadata:	
      AWS::CloudFormation::Init:	
        configSets:	
          MountConfig:	
          - prereq	
          - mountandinstall	
        prereq:	
          packages:	
            yum:	
              nfs-utils: []	
          files:	
            "/home/ec2-user/post_nfsstat":	
              content: !Sub |	
                #!/bin/bash	
                INPUT="$(cat)"	
                CW_JSON_OPEN='{ "Namespace": "EFS", "MetricData": [ '	
                CW_JSON_CLOSE=' ] }'	
                CW_JSON_METRIC=''	
                METRIC_COUNTER=0	
                for COL in 1 2 3 4 5 6; do	
                 COUNTER=0	
                 METRIC_FIELD=$COL	
                 DATA_FIELD=$(($COL+($COL-1)))	
                 while read line; do	
                   if [[ COUNTER -gt 0 ]]; then	
                     LINE=`echo $line | tr -s ' ' `	
                     AWS_COMMAND="aws cloudwatch put-metric-data --region ${AWS::Region}"	
                     MOD=$(( $COUNTER % 2))	
                     if [ $MOD -eq 1 ]; then	
                       METRIC_NAME=`echo $LINE | cut -d ' ' -f $METRIC_FIELD`	
                     else	
                       METRIC_VALUE=`echo $LINE | cut -d ' ' -f $DATA_FIELD`	
                     fi	
                     if [[ -n "$METRIC_NAME" && -n "$METRIC_VALUE" ]]; then	
                       INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)	
                       CW_JSON_METRIC="$CW_JSON_METRIC { \"MetricName\": \"$METRIC_NAME\", \"Dimensions\": [{\"Name\": \"InstanceId\", \"Value\": \"$INSTANCE_ID\"} ], \"Value\": $METRIC_VALUE },"	
                       unset METRIC_NAME	
                       unset METRIC_VALUE	
                       METRIC_COUNTER=$((METRIC_COUNTER+1))	
                       if [ $METRIC_COUNTER -eq 20 ]; then	
                         # 20 is max metric collection size, so we have to submit here	
                         aws cloudwatch put-metric-data --region ${AWS::Region} --cli-input-json "`echo $CW_JSON_OPEN ${!CW_JSON_METRIC%?} $CW_JSON_CLOSE`"	
                         # reset	
                         METRIC_COUNTER=0	
                         CW_JSON_METRIC=''	
                       fi	
                     fi	
                     COUNTER=$((COUNTER+1))	
                   fi	
                   if [[ "$line" == "Client nfs v4:" ]]; then	
                     # the next line is the good stuff	
                     COUNTER=$((COUNTER+1))	
                   fi	
                 done <<< "$INPUT"	
                done	
                # submit whatever is left	
                aws cloudwatch put-metric-data --region ${AWS::Region} --cli-input-json "`echo $CW_JSON_OPEN ${!CW_JSON_METRIC%?} $CW_JSON_CLOSE`"	
              mode: '000755'	
              owner: ec2-user	
              group: ec2-user	
            "/home/ec2-user/fstab_update":	
              content: !Sub |	
                #!/bin/bash	
                fstab=/etc/fstab	
                jenkinsEntry="${FileSystem}.efs.${AWS::Region}.amazonaws.com:/ /${MountPoint} nfs rw,hard,intr 0 0"	
                if [[ $(grep -q "${FileSystem}" "$fstab") ]]	
                then	
                    echo "Entry in fstab does not exists."	
                else	
                    echo "Entry in fstab exists."	
                    sed -i "\@$jenkinsEntry@d" /etc/fstab	
                fi	
                echo "$jenkinsEntry" >> /etc/fstab	
              mode: '000755'	
              owner: ec2-user	
              group: ec2-user	
            "/home/ec2-user/crontab":	
              content: "* * * * * /usr/sbin/nfsstat | /home/ec2-user/post_nfsstat\n"	
              owner: ec2-user	
              group: ec2-user	
          commands:	
            01_createdir:	
              command: !Sub "mkdir -p /${MountPoint}"	
            02_update_fstab:	
              command: "/home/ec2-user/fstab_update"	
        mountandinstall:	
          files:	
            "/home/ec2-user/org.jenkinsci.plugins.workflow.libs.GlobalLibraries.xml":	
              content: !Sub |	
                <?xml version='1.1' encoding='UTF-8'?>	
                <org.jenkinsci.plugins.workflow.libs.GlobalLibraries plugin="workflow-cps-global-lib">	
                  <libraries>	
                    <org.jenkinsci.plugins.workflow.libs.LibraryConfiguration>	
                      <name>global_pipeline_lib</name>	
                      <retriever class="org.jenkinsci.plugins.workflow.libs.SCMSourceRetriever">	
                        <scm class="jenkins.plugins.git.GitSCMSource" plugin="git">	
                          <remote>${DevopsRepoGitUrl}</remote>	
                          <credentialsId>git_credential</credentialsId>	
                          <traits>	
                            <jenkins.plugins.git.traits.BranchDiscoveryTrait/>	
                            <jenkins.scm.impl.trait.WildcardSCMHeadFilterTrait plugin="scm-api">	
                              <includes>master</includes>	
                              <excludes></excludes>	
                            </jenkins.scm.impl.trait.WildcardSCMHeadFilterTrait>	
                          </traits>	
                        </scm>	
                      </retriever>	
                      <defaultVersion>master</defaultVersion>	
                      <implicit>false</implicit>	
                      <allowVersionOverride>false</allowVersionOverride>	
                      <includeInChangesets>false</includeInChangesets>	
                    </org.jenkinsci.plugins.workflow.libs.LibraryConfiguration>	
                  </libraries>	
                </org.jenkinsci.plugins.workflow.libs.GlobalLibraries>	
              mode: '000755'	
              owner: ec2-user	
              group: ec2-user	
            "/home/ec2-user/plugins.txt":	
              content: |	
               ant	
               apache-httpcomponents-client-4-api	
               authorize-project	
               bootstrap4-api	
               bouncycastle-api	
               branch-api	
               build-timeout	
               checks-api	
               aws-credentials	
               command-launcher	
               credentials	
               configuration-as-code	
               credentials-binding	
               dashboard-view	
               display-url-api	
               durable-task	
               ec2	
               echarts-api	
               email-ext	
               emailext-template	
               envinject-api	
               environment-dashboard	
               envinject	
               cloudbees-folder	
               font-awesome-api	
               git-client	
               git	
               git-server	
               github-api	
               github-branch-source	
               github	
               gradle	
               jackson2-api	
               ace-editor	
               handlebars	
               jquery-detached	
               momentjs	
               jaxb	
               jquery	
               jquery3-api	
               jsch	
               junit	
               ldap	
               lockable-resources	
               mailer	
               matrix-auth	
               matrix-project	
               monitoring	
               node-iterator-api	
               okhttp-api	
               jdk-tool	
               antisamy-markup-formatter	
               pam-auth	
               workflow-aggregator	
               pipeline-graph-analysis	
               pipeline-utility-steps	
               workflow-api	
               workflow-basic-steps	
               pipeline-build-step	
               pipeline-model-definition	
               pipeline-model-extensions	
               pipeline-github-lib	
               workflow-cps	
               pipeline-input-step	
               workflow-job	
               pipeline-milestone-step	
               pipeline-model-api	
               workflow-multibranch	
               workflow-durable-task-step	
               pipeline-rest-api	
               workflow-scm-step	
               workflow-cps-global-lib	
               pipeline-stage-step	
               pipeline-stage-tags-metadata	
               pipeline-stage-view	
               workflow-step-api	
               workflow-support	
               plain-credentials	
               plugin-util-api	
               popper-api	
               resource-disposer	
               scm-api	
               script-security	
               simple-theme-plugin	
               snakeyaml-api	
               sonar	
               ssh-slaves	
               ssh-credentials	
               structs	
               timestamper	
               token-macro	
               trilead-api	
               variant	
               ws-cleanup	
              mode: '000755'	
              owner: ec2-user	
              group: ec2-user	
            "/home/ec2-user/batch-install-jenkins-plugins.sh":	
              content: |	
                #!/bin/bash	
                #	
                readonly PROGNAME=$(basename $0)	
                readonly PROGDIR=$(readlink -m $(dirname $0))	
                readonly ARGS="$@"	
                #	
                # Get up to date JSON file of stable plugins	
                #	
                get_update_center() {	
                  echo "Fetching JSON from update center"	
                # fetch up to date update center	
                  $CURL_CMD http://updates.jenkins-ci.org/stable/update-center.json -o $PLUGIN_TEMPDIR/update-center.json	
                # cleanup json	
                  sed -i 's|updateCenter.post(||g' $PLUGIN_TEMPDIR/update-center.json	
                  sed -i 's|);||g' $PLUGIN_TEMPDIR/update-center.json	
                }	
                #	
                # Fetch and install plugin	
                #	
                fetch_plugin()	
                {	
                  local DEP_LOOP	
                  local DEPENDENCIES	
                  local DEPENDENCY	
                  local URL	
                  local VERSION	
                  local SFILENAME	
                  local FFILENAME	
                  local PPLUGIN	
                  local OPTIONALP	
                  local FPLUGIN=$1	
                  if [ ! -z "$EXCLUDED_PLUGINS" ]; then	
                  for PPLUGIN in $EXCLUDED_PLUGINS	
                  do	
                    if [ "$FPLUGIN" = "$PPLUGIN" ]; then	
                    echo "$FPLUGIN is already provided, exiting"	
                    return	
                    fi	
                  done	
                  fi	
                  URL=`cat $PLUGIN_TEMPDIR/update-center.json | python -c "import sys, json; print json.load(sys.stdin)[\"plugins\"][\"$FPLUGIN\"][\"url\"]"`	
                  VERSION=`cat $PLUGIN_TEMPDIR/update-center.json | python -c "import sys, json; print json.load(sys.stdin)[\"plugins\"][\"$FPLUGIN\"][\"version\"]"`	
                  SFILENAME=`basename $URL | sed -e "s|.hpi|.jpi|g"`	
                  FFILENAME=`basename $URL | sed -e "s|.hpi|-$VERSION.jpi|g"`	
                  INCLUDEDPLUGINS="$INCLUDEDPLUGINS$FPLUGIN:$VERSION\n"	
                  if [ ! -f $PLUGIN_TEMPDIR/$FFILENAME ]; then	
                    echo "Downloading $FPLUGIN"	
                    $CURL_CMD $URL -o $PLUGIN_TEMPDIR/$FFILENAME	
                  fi	
                  cp $PLUGIN_TEMPDIR/$FFILENAME $PLUGINS_DIR/$SFILENAME	
                  DEPENDENCIES=`cat $PLUGIN_TEMPDIR/update-center.json | python -c "import sys, json; print json.load(sys.stdin)[\"plugins\"][\"$FPLUGIN\"][\"dependencies\"]"`	
                  if [ "$DEPENDENCIES" != "[]" ]; then	
                  for DEP_LOOP in 0 1 2 3 4 5 6 7 8 9 10; do	
                    DEPENDENCY=`cat $PLUGIN_TEMPDIR/update-center.json | python -c "import sys, json; print json.load(sys.stdin)[\"plugins\"][\"$FPLUGIN\"][\"dependencies\"][$DEP_LOOP][\"name\"]" 2>/dev/null || true`	
                    # No more dependency, exit loop	
                    if [ "$DEPENDENCY" = "" ]; then	
                      break;	
                    fi	
                    OPTIONALP=`cat $PLUGIN_TEMPDIR/update-center.json | python -c "import sys, json; print json.load(sys.stdin)[\"plugins\"][\"$FPLUGIN\"][\"dependencies\"][$DEP_LOOP][\"optional\"]" 2>/dev/null|| true`	
                    # Don't fetch optional dependencies	
                    if [ "$OPTIONALP" = "True" ]; then	
                      echo "$DEPENDENCY plugin is optional, it won't be included"	
                      continue;	
                    fi	
                    fetch_plugin $DEPENDENCY	
                  done	
                  fi	
                }	
                usage() {	
                  cat <<- EOF	
                  usage: $PROGNAME options	
                  Install or update Jenkins Plugins.	
                  OPTIONS:	
                     -p --plugins  file containing plugins list	
                     -x --xplugins   file containing excluded plugins list	
                     -d --plugindir  directory where to deploy plugins (.jpi)	
                  Examples:	
                     Run:	
                     $PROGNAME --plugins okplugins --excludedplugins nokplugins --plugindir /var/lib/myjenkins/plugins	
                EOF	
                  exit 1	
                }	
                #	
                # Parse command line	
                #	
                cmdline() {	
                  # got this idea from here:	
                  # http://kirk.webfinish.com/2009/10/bash-shell-script-to-use-getopts-with-gnu-style-long-positional-parameters/	
                  local arg=	
                  for arg	
                  do	
                    local delim=""	
                    case "$arg" in	
                      #translate --gnu-long-options to -g (short options)	
                      --plugins)     args="${args}-p ";;	
                      --xplugins)    args="${args}-e ";;	
                      --plugindir)     args="${args}-d ";;	
                      --help)      args="${args}-h ";;	
                      --verbose)     args="${args}-v ";;	
                      --debug)       args="${args}-x ";;	
                      #pass through anything else	
                      *) [[ "${arg:0:1}" == "-" ]] || delim="\""	
                        args="${args}${delim}${arg}${delim} ";;	
                    esac	
                  done	
                  #Reset the positional parameters to the short options	
                  eval set -- $args	
                  while getopts "hvxp:e:d:" OPTION	
                  do	
                     case $OPTION in	
                     v)	
                       readonly VERBOSE=1	
                       ;;	
                     x)	
                       readonly DEBUG='-x'	
                       set -x	
                       ;;	
                     h)	
                       usage	
                       exit 0	
                       ;;	
                     p)	
                       readonly PLUGINS_FILE=$OPTARG	
                       ;;	
                     e)	
                       readonly EXCLUDED_PLUGINS_FILE=$OPTARG	
                       ;;	
                     d)	
                       readonly PLUGINS_DIR=$OPTARG	
                       ;;	
                    esac	
                  done	
                  if [ -z "$PLUGINS_FILE" ]; then	
                    echo "You must provide plugin file"	
                    usage	
                  fi	
                  if [ -z "$PLUGINS_DIR" ]; then	
                    echo "You must provide plugin directory"	
                    usage	
                  fi	
                  readonly PLUGINS=`cat $PLUGINS_FILE`	
                  if [ ! -z "$EXCLUDED_PLUGINS_FILE" ]; then	
                    readonly EXCLUDED_PLUGINS=`cat $EXCLUDED_PLUGINS_FILE`	
                  fi	
                  if [ "$VERBOSE" = "1" ]; then	
                    CURL_CMD="curl -L"	
                  else	
                    CURL_CMD="curl -L --silent"	
                  fi	
                  if [ "$DEBUG" = "-x" ]; then	
                    CURL_CMD="$CURL_CMD -v"	
                  fi	
                }	
                main() {	
                  cmdline $ARGS	
                  readonly PLUGIN_TEMPDIR=`mktemp -d /tmp/batchjpi.XXXXXXX`	
                  get_update_center	
                  for PLUGIN in $PLUGINS	
                  do	
                    echo "Fetching plugin $PLUGIN and dependencies"	
                    fetch_plugin $PLUGIN	
                  done	
                  rm -rf $PLUGIN_TEMPDIR	
                }	
                main	
              mode: '000755'	
              owner: ec2-user	
              group: ec2-user	
            "/home/ec2-user/jenkins.yaml":	
              content: !Sub |	
                x-ec2_anchor: &ec2_anchor	
                  associatePublicIp: false	
                  connectBySSHProcess: false	
                  connectionStrategy: PRIVATE_IP	
                  deleteRootOnTermination: true	
                  ebsOptimized: true	
                  subnetId: "${Subnet04} ${Subnet05} ${Subnet06}"	
                  iamInstanceProfile: "${NodeInstanceProfile.Arn}"	
                  idleTerminationMinutes: ${SlaveIdleTimeOut}	
                  maxTotalUses: -1	
                  monitoring: false	
                  numExecutors: ${SlaveNoOfExecuters}	
                  stopOnTerminate: false	
                  useDedicatedTenancy: false	
                  useEphemeralDevices: false	
                  ami: "${CreateJenkinsSlaveImage}"	
                  securityGroups: "${NodeSecurityGroup}"	
                  remoteFS: "/home/ec2-user"	
                  remoteAdmin: "ec2-user"	
                  mode: "NORMAL"	
                  minimumNumberOfInstances: ${SlaveMinInstances}	
                  minimumNumberOfSpareInstances: ${SlaveSpareInstances}	
                  hostKeyVerificationStrategy: ACCEPT_NEW	
                  amiType:	
                    unixData:	
                      sshPort: "22"	
                  tags:	
                    - name: Name	
                      value: Jenkins-Slave	
                jenkins:	
                  systemMessage: "Jenkins configured automatically by Jenkins Configuration as Code plugin\n\n"	
                  numExecutors: ${JenkinsNoOfExecuters}	
                  crumbIssuer:	
                    standard:	
                      excludeClientIPFromCrumb: false	
                  globalNodeProperties:	
                    - envVars:	
                        env:	
                        - key: GitcredentialsId	
                          value: git_credential	
                  securityRealm:	
                    local:	
                      allowsSignup: false	
                      users:	
                        - id: "admin"	
                          password: "INITIAL_PASSWORD"	
                  authorizationStrategy:	
                    projectMatrix:	
                      permissions:	
                        - "Overall/Administer:admin"	
                  clouds:	
                    - amazonEC2:	
                        cloudName: "ec2"	
                        instanceCapStr: ${SlaveMaxInstances}	
                        useInstanceProfileForCredentials: true	
                        sshKeysCredentialsId: "slave_ssh_key"	
                        noDelayProvisioning: true	
                        region: "${AWS::Region}"	
                        templates:	
                          - description: "Auto configured EC2 Agent"	
                            type: "${SlaveInstanceType}"	
                            labelString: "JenkinsSlaves"	
                            <<: *ec2_anchor	
                tool:	
                  jdk:	
                    installations:	
                      - name: jdk11	
                        home: JDK_HOME	
                credentials:	
                  system:	
                    domainCredentials:	
                      - credentials:	
                          - basicSSHUserPrivateKey:	
                              scope: GLOBAL	
                              id: slave_ssh_key	
                              username: ec2-user	
                              description: "Slave SSH Key"	
                              privateKeySource:	
                                directEntry:	
                                  privateKey: ${EC2SlaveKey}	
                          - usernamePassword:	
                              scope: GLOBAL	
                              id: "git_credential"	
                              username: "${GitUsername}"	
                              password: "${GitPassword}"	
                              description: "Git Credentials"	
                unclassified:	
                  sonarglobalconfiguration:	
                    buildWrapperEnabled: false	
                    installations:	
                      - name: "SonarQubeServer"	
                        serverUrl: "http://${JenkinsLoadBalancer.DNSName}/sonarqube"	
              mode: '000755'	
              owner: ec2-user	
              group: ec2-user	
            "/home/ec2-user/install-jenkins":	
              content: !Sub |	
                #!/bin/bash	
                # Install Plugins	
                while [ ! -f /${MountPoint}/plugins ]	
                do	
                  sleep 60	
                done	
                if [ ! -f /${MountPoint}/jenkins-plugins-installed ]; then	
                  ./home/ec2-user/batch-install-jenkins-plugins.sh --plugins /home/ec2-user/plugins.txt --plugindir /${MountPoint}/plugins	
                  touch /${MountPoint}/jenkins-plugins-installed	
                  chmod 755 /${MountPoint}/jenkins-plugins-installed	
                fi	
                jdk_home=$(find /usr/lib/jvm -name java-11* -type d)	
                sed -i -e "s|JDK_HOME|$jdk_home|g" /home/ec2-user/jenkins.yaml	
                while [ ! -f /${MountPoint}/secrets/initialAdminPassword ]	
                do	
                  sleep 30s	
                done	
                if [ ! -f /${MountPoint}/jenkins.yaml ]; then	
                  read -r super_password < /${MountPoint}/secrets/initialAdminPassword	
                  sed -i -e "s|INITIAL_PASSWORD|$super_password|g" /home/ec2-user/jenkins.yaml	
                  mv /${MountPoint}/secrets/initialAdminPassword /${MountPoint}/secrets/initialAdminPassword.back	
                  cp /home/ec2-user/jenkins.yaml /${MountPoint}/jenkins.yaml	
                fi	
                cp /home/ec2-user/org.jenkinsci.plugins.workflow.libs.GlobalLibraries.xml /${MountPoint}/	
              mode: '000755'	
              owner: ec2-user	
              group: ec2-user	
          commands:	
            01_mount:	
              command: !Sub >	
                mount -t nfs4 -o nfsvers=4.1 ${FileSystem}.efs.${AWS::Region}.amazonaws.com:/ /${MountPoint}	
            02_install_jenkins:	
              command: "/home/ec2-user/install-jenkins"	
            03_permissions:	
              command: !Sub "chown jenkins:jenkins -R /${MountPoint}"	
            04_jenkins_restart:	
              command: "systemctl restart jenkins"	
    Properties:	
      AssociatePublicIpAddress: "false"	
      BlockDeviceMappings:	
        - DeviceName: /dev/xvda	
          Ebs:	
            DeleteOnTermination: true	
            VolumeSize: !Ref NodeVolumeSize	
            VolumeType: gp2	
      IamInstanceProfile: !Ref NodeInstanceProfile	
      ImageId: !Ref CreateJenkinsImage	
      InstanceType: !Ref NodeInstanceType	
      KeyName: !Ref KeyName	
      SecurityGroups:	
        - Ref: NodeSecurityGroup	
      UserData:	
        Fn::Base64: !Sub |	
          #!/bin/bash -xe	
          yum update -y	
          yum install -y aws-cfn-bootstrap	
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource NodeLaunchConfig --configsets MountConfig --region ${AWS::Region}	
          crontab /home/ec2-user/crontab	
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --region ${AWS::Region} '${WaitHandle}'	
  NodeGroup:	
    Type: "AWS::AutoScaling::AutoScalingGroup"	
    Properties:	
      DesiredCapacity: !Ref NodeAutoScalingGroupDesiredCapacity	
      LaunchConfigurationName: !Ref NodeLaunchConfig	
      TargetGroupARNs:	
        - !Ref TargetGroup	
      MaxSize: !Ref NodeAutoScalingGroupMaxSize	
      MinSize: !Ref NodeAutoScalingGroupMinSize	
      HealthCheckType: ELB	
      HealthCheckGracePeriod: 120	
      Tags:	
        - Key: Name	
          PropagateAtLaunch: "true"	
          Value: !Sub ${NodeGroupName}-jenkins	
      VPCZoneIdentifier:	
        - !Ref Subnet04	
        - !Ref Subnet05	
        - !Ref Subnet06	
    UpdatePolicy:	
      AutoScalingRollingUpdate:	
        MaxBatchSize: "1"	
        MinInstancesInService: !Ref NodeAutoScalingGroupDesiredCapacity	
        PauseTime: PT5M	
  SonarNodeLaunchConfig:	
    Type: "AWS::AutoScaling::LaunchConfiguration"	
    DependsOn:	
      - DatabasePrimaryInstance	
      - JenkinsLoadBalancer	
    Metadata:	
      AWS::CloudFormation::Init:	
        configSets:	
          SonarConfig:	
          - setup	
          - config	
        setup:	
          packages:	
            yum:	
              nfs-utils: []	
          files:	
            "/home/ec2-user/sonar.properties":	
              content: !Sub |	
                sonar.web.context=/sonarqube	
                sonar.path.data=/opt/sonarqube/data	
                sonar.jdbc.username=${DatabaseUsername}	
                sonar.jdbc.password=${DatabasePassword}	
                sonar.jdbc.url=jdbc:postgresql://${DatabasePrimaryInstance.Endpoint.Address}:${DatabasePrimaryInstance.Endpoint.Port}/${DatabaseName}	
              mode: '000755'	
              owner: sonar	
              group: sonar	
          commands:	
            01_update_fstab:	
              command: "chown sonar:sonar -R /opt/sonarqube"	
        config:	
          commands:	
            01_copy_props:	
              command: "cp /home/ec2-user/sonar.properties /opt/sonarqube/conf/"	
            02_sonar_restart:	
              command: "/etc/init.d/sonar restart"	
            03_create_webhook:	
              command: !Sub "sleep 600 && curl \"http://admin:admin@localhost:9000/sonarqube/api/webhooks/create\" -X POST -d \"name=Jenkins&url=http://${JenkinsLoadBalancer.DNSName}/sonarqube-webhook/\""	
    Properties:	
      AssociatePublicIpAddress: "false"	
      BlockDeviceMappings:	
        - DeviceName: /dev/xvda	
          Ebs:	
            DeleteOnTermination: true	
            VolumeSize: !Ref SonarNodeVolumeSize	
            VolumeType: gp2	
      IamInstanceProfile: !Ref NodeInstanceProfile	
      ImageId: !Ref CreateSonarImage	
      InstanceType: !Ref SonarInstanceType	
      KeyName: !Ref KeyName	
      SecurityGroups:	
        - Ref: NodeSecurityGroup	
      UserData:	
        Fn::Base64: !Sub |	
          #!/bin/bash -xe	
          yum install -y aws-cfn-bootstrap	
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource SonarNodeLaunchConfig --configsets SonarConfig --region ${AWS::Region}	
          crontab /home/ec2-user/crontab	
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --region ${AWS::Region} '${WaitHandle}'	
  SonarNodeGroup:	
    Type: "AWS::AutoScaling::AutoScalingGroup"	
    Properties:	
      DesiredCapacity: !Ref SonarNodeAutoScalingGroupDesiredCapacity	
      LaunchConfigurationName: !Ref SonarNodeLaunchConfig	
      TargetGroupARNs:	
        - !Ref SonarTargetGroup	
      MaxSize: !Ref SonarNodeAutoScalingGroupMaxSize	
      MinSize: !Ref SonarNodeAutoScalingGroupMinSize	
      HealthCheckType: ELB	
      HealthCheckGracePeriod: 120	
      Tags:	
        - Key: Name	
          PropagateAtLaunch: "true"	
          Value: !Sub ${NodeGroupName}-sonarqube	
      VPCZoneIdentifier:	
        - !Ref Subnet04	
        - !Ref Subnet05	
        - !Ref Subnet06	
    UpdatePolicy:	
      AutoScalingRollingUpdate:	
        MaxBatchSize: "1"	
        MinInstancesInService: !Ref NodeAutoScalingGroupDesiredCapacity	
        PauseTime: PT5M	
  myCPUPolicy:	
    Type: AWS::AutoScaling::ScalingPolicy	
    Properties:	
      AutoScalingGroupName: !Ref NodeGroup	
      PolicyType: TargetTrackingScaling	
      TargetTrackingConfiguration:	
        PredefinedMetricSpecification:	
          PredefinedMetricType: ASGAverageCPUUtilization	
        TargetValue: !Ref PolicyTargetValue	
  FileSystem:	
    Type: AWS::EFS::FileSystem	
    Properties:	
      Encrypted: true	
      FileSystemTags:	
        - Key: Name	
          Value: !Sub "${EnvironmentPrefix}-Jenkins-FileSystem"	
        - Key: "backup"	
          Value: "daily"	
      KmsKeyId: !GetAtt EFSKey.Arn	
  EFSKey:	
    Type: AWS::KMS::Key	
    Properties:	
      Tags:	
        - Key: Name	
          Value: !Sub '${EnvironmentPrefix}-EFS-Key'	
      KeyPolicy:	
        Version: 2012-10-17	
        Id: key-default-1	
        Statement:	
          - Sid: Allow administration of the key	
            Effect: Allow	
            Principal:	
              AWS: !Join	
                - ''	
                - - 'arn:aws:iam::'	
                  - !Ref 'AWS::AccountId'	
                  - ':root'	
            Action:	
              - 'kms:*'	
            Resource: '*'	
  MountTargetSecurityGroup:	
    Type: AWS::EC2::SecurityGroup	
    Properties:	
      VpcId:	
        Ref: VPC	
      GroupDescription: Security group for mount target	
      SecurityGroupIngress:	
      - IpProtocol: tcp	
        FromPort: '2049'	
        ToPort: '2049'	
        CidrIp: 0.0.0.0/0	
  MountTargetA:	
    Type: AWS::EFS::MountTarget	
    Properties:	
      FileSystemId:	
        Ref: FileSystem	
      SubnetId:	
        Ref: Subnet04	
      SecurityGroups:	
      - Ref: MountTargetSecurityGroup	
  MountTargetB:	
    Type: AWS::EFS::MountTarget	
    Properties:	
      FileSystemId:	
        Ref: FileSystem	
      SubnetId:	
        Ref: Subnet05	
      SecurityGroups:	
      - Ref: MountTargetSecurityGroup	
  MountTargetC:	
    Type: AWS::EFS::MountTarget	
    Properties:	
      FileSystemId:	
        Ref: FileSystem	
      SubnetId:	
        Ref: Subnet06	
      SecurityGroups:	
      - Ref: MountTargetSecurityGroup	
  JenkinsLoadBalancer:	
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'	
    Properties:	
      Scheme: internet-facing	
      SecurityGroups:	
        - !Ref ALBSecurityGroup	
      Subnets:	
        - !Ref Subnet01	
        - !Ref Subnet02	
        - !Ref Subnet03	
  CICDLBDNSRecord:	
    Condition: HasDomainName	
    Type: AWS::Route53::RecordSet	
    Properties:	
      AliasTarget:	
        DNSName: !GetAtt JenkinsLoadBalancer.DNSName	
        EvaluateTargetHealth: true	
        HostedZoneId:  !GetAtt JenkinsLoadBalancer.CanonicalHostedZoneID	
      Name: !Sub cicd.${DomainName}	
      HostedZoneId:  !Ref HostedZoneId	
      Type: A	
  TargetGroup:	
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'	
    Properties:	
      TargetType: instance	
      HealthCheckEnabled: true	
      HealthCheckPath: /	
      HealthCheckPort: 8080	
      HealthCheckIntervalSeconds: 125	
      HealthCheckTimeoutSeconds: 120	
      HealthyThresholdCount: 3	
      UnhealthyThresholdCount: 10	
      Matcher:	
        HttpCode: "200,302,403,404"	
      Port: 8080	
      Protocol: HTTP	
      VpcId: !Ref VPC	
  SonarTargetGroup:	
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'	
    Properties:	
      Tags:	
        - Key: Name	
          Value: !Sub '${EnvironmentPrefix}-Sonar-TG'	
      TargetType: instance	
      HealthCheckEnabled: true	
      HealthCheckPath: /	
      HealthCheckPort: 9000	
      HealthCheckIntervalSeconds: 60	
      HealthCheckTimeoutSeconds: 55	
      HealthyThresholdCount: 3	
      Matcher:	
        HttpCode: "200,302,403,404"	
      Port: 9000	
      Protocol: HTTP	
      VpcId: !Ref VPC	
  JenkinsHTTPListenerRule:	
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'	
    Properties:	
      Actions:	
        - Type: forward	
          TargetGroupArn: !Ref TargetGroup	
      Conditions:	
        - Field: path-pattern	
          PathPatternConfig:	
            Values:	
              - /*	
      ListenerArn: !Ref HTTPListener	
      Priority: 4	
  SonarHTTPListenerRule:	
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'	
    Properties:	
      Actions:	
        - Type: forward	
          TargetGroupArn: !Ref SonarTargetGroup	
      Conditions:	
        - Field: path-pattern	
          PathPatternConfig:	
            Values:	
              - /sonarqube/*	
      ListenerArn: !Ref HTTPListener	
      Priority: 2	
  HTTPListener:	
    Type: 'AWS::ElasticLoadBalancingV2::Listener'	
    Properties:	
      DefaultActions:	
        - TargetGroupArn: !Ref TargetGroup	
          Type: forward	
      LoadBalancerArn: !Ref JenkinsLoadBalancer	
      Port: 80	
      Protocol: HTTP	
  JenkinsHTTPSListenerRule:	
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'	
    Condition: HasDomainName	
    Properties:	
      Actions:	
        - Type: forward	
          TargetGroupArn: !Ref TargetGroup	
      Conditions:	
        - Field: path-pattern	
          PathPatternConfig:	
            Values:	
              - /*	
      ListenerArn: !Ref HTTPSListener	
      Priority: 4	
  SonarHTTPSListenerRule:	
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'	
    Condition: HasDomainName	
    Properties:	
      Actions:	
        - Type: forward	
          TargetGroupArn: !Ref SonarTargetGroup	
      Conditions:	
        - Field: path-pattern	
          PathPatternConfig:	
            Values:	
              - /sonarqube/*	
      ListenerArn: !Ref HTTPSListener	
      Priority: 2	
  HTTPSListener:	
    Type: 'AWS::ElasticLoadBalancingV2::Listener'	
    Condition: HasDomainName	
    Properties:	
      Certificates:	
      - CertificateArn: !Ref Certificate	
      DefaultActions:	
      - TargetGroupArn: !Ref TargetGroup	
        Type: forward	
      LoadBalancerArn: !Ref JenkinsLoadBalancer	
      Port: 443	
      # Protocol: HTTPS	
  BastionSecurityGroup:	
    Type: "AWS::EC2::SecurityGroup"	
    Properties:	
      Tags:	
        - Key: Name	
          Value: !Sub '${EnvironmentPrefix}-Bastion-SG'	
      GroupDescription: Security group for bastion node	
      VpcId: !Ref VPC	
  BastionSecurityGroupIngress:	
    Type: "AWS::EC2::SecurityGroupIngress"	
    DependsOn: BastionSecurityGroup	
    Properties:	
      GroupId: !Ref BastionSecurityGroup	
      IpProtocol: tcp	
      FromPort: 22	
      ToPort: 22	
      CidrIp: '0.0.0.0/0'	
  BastionNodeLaunchConfig:	
    Type: "AWS::AutoScaling::LaunchConfiguration"	
    Properties:	
      AssociatePublicIpAddress: "true"	
      BlockDeviceMappings:	
        - DeviceName: /dev/xvda	
          Ebs:	
            DeleteOnTermination: true	
            VolumeSize: !Ref NodeVolumeSize	
            VolumeType: gp2	
      ImageId: !Ref CreateBastionImage	
      InstanceType: !Ref BastionInstanceType	
      IamInstanceProfile: !Ref NodeInstanceProfile	
      KeyName: !Ref KeyName	
      SecurityGroups:	
        - Ref: BastionSecurityGroup	
  BastionNodeGroup:	
    Type: "AWS::AutoScaling::AutoScalingGroup"	
    Properties:	
      DesiredCapacity: !Ref BastionNodeAutoScalingGroupDesiredCapacity	
      LaunchConfigurationName: !Ref BastionNodeLaunchConfig	
      MaxSize: !Ref BastionNodeAutoScalingGroupMaxSize	
      MinSize: !Ref BastionNodeAutoScalingGroupMinSize	
      Tags:	
        - Key: Name	
          PropagateAtLaunch: "true"	
          Value: !Sub ${NodeGroupName}-bastion	
      VPCZoneIdentifier:	
        - !Ref Subnet01	
        - !Ref Subnet02	
        - !Ref Subnet03	
    UpdatePolicy:	
      AutoScalingRollingUpdate:	
        MaxBatchSize: "1"	
        MinInstancesInService: !Ref BastionNodeAutoScalingGroupDesiredCapacity	
        PauseTime: PT5M	
  CICDWebACL:	
    Type: AWS::WAFv2::WebACL	
    Properties:	
      Name: CICDWebACL	
      Scope: REGIONAL	
      Description: This is an example WebACL	
      DefaultAction:	
        Allow: {}	
      VisibilityConfig:	
        SampledRequestsEnabled: true	
        CloudWatchMetricsEnabled: true	
        MetricName: CICDALBWebACLMetric	
      Rules:	
        - Name: RuleWithAWSManagedRules	
          Priority: 0	
          OverrideAction:	
            Count: {}	
          VisibilityConfig:	
            SampledRequestsEnabled: true	
            CloudWatchMetricsEnabled: true	
            MetricName: RuleWithAWSManagedRulesMetric	
          Statement:	
            ManagedRuleGroupStatement:	
              VendorName: AWS	
              Name: AWSManagedRulesCommonRuleSet	
              ExcludedRules: []	
        - Name: RuleWithAWSManagedLinuxnRules	
          Priority: 4	
          OverrideAction:	
            Count: {}	
          VisibilityConfig:	
            SampledRequestsEnabled: true	
            CloudWatchMetricsEnabled: true	
            MetricName: RuleWithAWSManagedLinuxRulesMetric	
          Statement:	
            ManagedRuleGroupStatement:	
              VendorName: AWS	
              Name: AWSManagedRulesLinuxRuleSet	
              ExcludedRules: []	
        - Name: RuleWithAWSManagedIPReputationRules	
          Priority: 5	
          OverrideAction:	
            Count: {}	
          VisibilityConfig:	
            SampledRequestsEnabled: true	
            CloudWatchMetricsEnabled: true	
            MetricName: RuleWithAWSManagedIPReputationRulesMetric	
          Statement:	
            ManagedRuleGroupStatement:	
              VendorName: AWS	
              Name: AWSManagedRulesAmazonIpReputationList	
              ExcludedRules: []	
        - Name: RuleWithAWSManagedAdminProtectionRules	
          Priority: 6	
          OverrideAction:	
            Count: {}	
          VisibilityConfig:	
            SampledRequestsEnabled: true	
            CloudWatchMetricsEnabled: true	
            MetricName: RuleWithAWSManagedAdminProtectionRulesMetric	
          Statement:	
            ManagedRuleGroupStatement:	
              VendorName: AWS	
              Name: AWSManagedRulesAdminProtectionRuleSet	
              ExcludedRules: []	
        - Name: RuleWithAWSManagedKnownBadInputsRules	
          Priority: 2	
          OverrideAction:	
            Count: {}	
          VisibilityConfig:	
            SampledRequestsEnabled: true	
            CloudWatchMetricsEnabled: true	
            MetricName: RuleWithAWSManagedKnownBadInputsRulesMetric	
          Statement:	
            ManagedRuleGroupStatement:	
              VendorName: AWS	
              Name: AWSManagedRulesKnownBadInputsRuleSet	
              ExcludedRules: []	
        - Name: RuleWithAWSManagedSQLInjectInputsRules	
          Priority: 3	
          OverrideAction:	
            Count: {}	
          VisibilityConfig:	
            SampledRequestsEnabled: true	
            CloudWatchMetricsEnabled: true	
            MetricName: RuleWithAWSManagedSQLInjectInputsRulesMetric	
          Statement:	
            ManagedRuleGroupStatement:	
              VendorName: AWS	
              Name: AWSManagedRulesSQLiRuleSet	
              ExcludedRules: []	
        - Name: BlockXssAttack	
          Priority: 1	
          Action:	
            Block: {}	
          VisibilityConfig:	
            SampledRequestsEnabled: true	
            CloudWatchMetricsEnabled: true	
            MetricName: BlockXssAttackMetric	
          Statement:	
            XssMatchStatement:	
              FieldToMatch:	
                AllQueryArguments: {}	
              TextTransformations:	
                - Priority: 1	
                  Type: NONE	
  	
  CICDWebACLAssociation:	
    Type: 'AWS::WAFv2::WebACLAssociation'	
    Properties:	
      WebACLArn: !GetAtt CICDWebACL.Arn	
      ResourceArn: !Ref JenkinsLoadBalancer	
  KMSKey:	
    Type: AWS::KMS::Key	
    Properties:	
      Description: "Encryption key for efs daily backup store"	
      EnableKeyRotation: True	
      Enabled: True	
      KeyPolicy:	
        Version: "2012-10-17"	
        Statement:	
        - Effect: Allow	
          Principal:	
            "AWS": { "Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:root" }	
          Action:	
          - kms:*	
          Resource: "*"	
  BackupVaultWithDailyBackups:	
    Type: "AWS::Backup::BackupVault"	
    Properties:	
      BackupVaultName: "BackupVaultWithDailyBackups"	
      EncryptionKeyArn: !GetAtt KMSKey.Arn	
  	
  BackupPlanWithDailyBackups:	
    Type: "AWS::Backup::BackupPlan"	
    Properties:	
      BackupPlan:	
        BackupPlanName: "BackupPlanWithDailyBackups"	
        BackupPlanRule:	
          -	
            RuleName: "RuleForDailyBackups"	
            TargetBackupVault: !Ref BackupVaultWithDailyBackups	
            ScheduleExpression: "cron(0 5 ? * * *)"	
    DependsOn: BackupVaultWithDailyBackups	
  	
  BackupRole:	
    Type: "AWS::IAM::Role"	
    Properties:	
     AssumeRolePolicyDocument:	
       Version: "2012-10-17"	
       Statement:	
         -	
          Effect: "Allow"	
          Principal:	
            Service:	
              - "backup.amazonaws.com"	
          Action:	
            - "sts:AssumeRole"	
     ManagedPolicyArns:	
       - "arn:aws:iam::aws:policy/service-role/AWSBackupServiceRolePolicyForBackup"	
  	
  TagBasedBackupSelection:	
    Type: "AWS::Backup::BackupSelection"	
    Properties:	
      BackupSelection:	
        SelectionName: "TagBasedBackupSelection"	
        IamRoleArn: !GetAtt BackupRole.Arn	
        ListOfTags:	
         -	
           ConditionType: "STRINGEQUALS"	
           ConditionKey: "backup"	
           ConditionValue: "daily"	
      BackupPlanId: !Ref BackupPlanWithDailyBackups	
    DependsOn: BackupPlanWithDailyBackups	
  	
  CodeArtifactDomainResource:	
    Type: 'AWS::CodeArtifact::Domain'	
    Properties:	
      DomainName: !Ref CodeArtifactDomain	
  	
  CodeArtifactRepository:	
    Type: 'AWS::CodeArtifact::Repository'	
    Properties:	
      RepositoryName: !Ref CodeArtifactRepoName	
      DomainName: !GetAtt CodeArtifactDomainResource.Name	
      ExternalConnections:	
        - public:maven-central	
  	
  CodeArtifactPolicy:	
    Type: AWS::IAM::ManagedPolicy	
    Properties:	
      Path: /	
      Roles:	
        - Ref: NodeInstanceRole	
      PolicyDocument:	
        Version: '2012-10-17'	
        Statement:	
        - Effect: Allow	
          Action:	
          - codeartifact:*	
          Resource: !Ref CodeArtifactRepository	
Outputs:	
  SubnetIds:	
    Description: All subnets in the VPC	
    Value: !Join	
      - ','	
      - - !Ref Subnet04	
        - !Ref Subnet05	
        - !Ref Subnet06	
    Export:	
      Name:	
        Fn::Sub: "${AWS::StackName}-SubnetIds"	
  SecurityGroups:	
    Description: >-	
      Security group for the cluster control plane communication with worker	
      nodes	
    Value: !Join	
      - ','	
      - - !Ref ALBSecurityGroup	
    Export:	
      Name:	
        Fn::Sub: "${AWS::StackName}-SecurityGroups"	
  VpcId:	
    Description: The VPC Id	
    Value: !Ref VPC	
    Export:	
      Name:	
        Fn::Sub: "${AWS::StackName}-VpcId"	
  AllSubnetIds:	
    Description: All subnets in the VPC	
    Value: !Join	
      - ','	
      - - !Ref Subnet01	
        - !Ref Subnet02	
        - !Ref Subnet03	
        - !Ref Subnet04	
        - !Ref Subnet05	
        - !Ref Subnet06	
    Export:	
      Name:	
        Fn::Sub: "${AWS::StackName}-AllSubnetIds"	
  NodeInstanceRole:	
    Description: The node instance role	
    Value: !GetAtt NodeInstanceRole.Arn	
  NodeSecurityGroup:	
    Description: The security group for the node group	
    Value: !Ref NodeSecurityGroup	
  NodeGroup:	
    Description: The NodeGroup for the node group	
    Value: !Ref NodeGroup	
